---
title: "Hands-on Exercise 2: Beyond ggplot2 Fundamentals"
author: "Nguyen Bao Thu Phuong"
date: "19 January 2025" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Overview

In this chapter, we will explore several **ggplot2 extensions** designed to create more refined and impactful statistical graphics. By the end of this exercise, you will be able to:

-   Control annotation placement on graphs using functions from the `ggrepel` package.

-   Design professional, publication-quality figures with functions from the `ggthemes` and `hrbrthemes` packages.

-   Combine multiple ggplot2 graphs into composite figures using the `patchwork` package.

# Getting started

## Install and load the required libraries

In this exercise, in addition to the **tidyverse**, four R packages will be utilized:

-   **ggrepel**: Provides geoms for ggplot2 to prevent overlapping text labels.

-   **ggthemes**: Offers extra themes, geoms, and scales to enhance ggplot2 visualizations.

-   **hrbrthemes**: Focuses on typography-centric themes and components for ggplot2.

-   **patchwork**: Facilitates the creation of composite figures by combining multiple ggplot2 graphs.

The code chunk below checks if these packages are installed and load them into your working R environment.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse)
```

## Importing data

For this exercise, we will use a data file named `Exam_data`, which contains year-end examination grades for a cohort of Primary 3 students from a local school. The file is in CSV format.

The code chunk below demonstrates how to import `Exam_data.csv` into the R environment using the `read_csv()` function from the **readr** package, which is part of the **tidyverse** collection.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

The `exam_data` tibble consists of seven attributes, with four being categorical and three continuous:

-   Categorical attributes: ID, CLASS, GENDER, and RACE.

-   Continuous attributes: MATHS, ENGLISH, and SCIENCE.

# Beyond ggplot2 Annotation: ggrepel

One of the challenges in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| warning: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The Code

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

[**ggrepel**](https://ggrepel.slowkow.com/) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text as in our examples on the right.

We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

## Working with ggrepel

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| warning: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The Code

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

# Beyond ggplot2 Themes

ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

## The Code

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```
:::

Refer to this [link](https://ggplot2.tidyverse.org/reference/#themes) to learn more about ggplot2 `Themes`.

## Working with ggtheme package

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), ‘Stata’, ‘Excel’, and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

In the example below, *The Economist* theme is used.

::: panel-tabset
## The Plot

```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## The Code

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::

## Working with hrbrthemes package

[**hrbrthemes**](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| warning: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

## The Code

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::

The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of **hrbrthemes** should be used. Consult [this vignette](https://cran.r-project.org/web/packages/hrbrthemes/vignettes/why_hrbrthemes.html) to learn more.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| warning: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## The Code

```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::

In the code chunk above:

-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15, and

-   `grid` argument is used to remove the x-axis grid lines.

# Beyond Single Graph

It is common to require multiple graphs to convey a compelling visual story effectively. Several **ggplot2** extensions provide functions to compose figures by combining multiple graphs. In this section, you will learn how to create a composite plot by integrating multiple graphs.

To begin, the code chunk below demonstrates how to create three individual statistical graphics:

::: panel-tabset
## The Plot

```{r}
#| echo: false
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
p1
```

## The Code

```{r}
#| eval: false
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```
:::

Next

::: panel-tabset
## The Plot

```{r}
#| echo: false
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
p2
```

## The Code

```{r}
#| eval: false
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
```
:::

Lastly, we draw a scatterplot for English score versus Maths score by as shown below.

::: panel-tabset
## The Plot

```{r}
#| echo: false
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
p3
```

## The Code

```{r}
#| eval: false
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

## Creating Composite Graphics: patchwork methods

Several **ggplot2** extensions provide functions for creating composite figures by combining multiple graphs. Notable examples include **grid.arrange()** from the **gridExtra** package and **plot_grid()** from the **cowplot** package. In this section, we will focus on the **patchwork** package, a **ggplot2** extension specifically designed for combining separate **ggplot2** graphs into a single figure.

The **patchwork** package features a simple and intuitive syntax that makes creating layouts straightforward. Key elements of its syntax include:

-   Using the **+** operator to create a two-column layout.

-   Utilizing parentheses **()** to group subplots.

-   Employing the **/** operator to arrange graphs in a two-row layout.

## Combining two ggplot2 graphs

Figure in the tabset below shows a composite of two histograms created using **patchwork**. Note how simple is the syntax used to create the plot!

::: panel-tabset
## The Plot

```{r}
#| echo: false
p1 + p2
```

## The Code

```{r}
#| eval: false
p1 + p2
```
:::

## Combining three ggplot2 graphs

We can plot more complex composite using appropriate operators. For example, the composite figure below is plotted by using:

-   “/” operator to stack two ggplot2 graphs,

-   “\|” operator to place the plots beside each other,

-   “()” operator the define the sequence of the plotting.

::: panel-tabset
## The Plot

```{r}
#| echo: false
(p1 / p2) | p3
```

## The Code

```{r}
#| eval: false
(p1 / p2) | p3
```
:::

To learn more about plot operators, refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html).

## Creating a composite figure with tag

::: panel-tabset
## The Plot

```{r}
#| echo: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

## The Code

```{r}
#| eval: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```
:::

## Creating figure with insert

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
## The Plot

```{r}
#| echo: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

## The Code

```{r}
#| eval: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::

## Creating a composite figure by using patchwork and ggtheme

Figure below is created by combining `patchwork` and `theme_economist()` of **ggthemes** package discussed earlier.

::: panel-tabset
## The Plot

```{r}
#| echo: false
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

## The Code

```{r}
#| eval: false
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
:::

# Reference

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)

-   [ggrepel](https://ggrepel.slowkow.com/)

-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)

-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)

-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)

-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)
