---
title: "Hands-on Exercise 4.2: Visual Statistical Analysis"
author: "Nguyen Bao Thu Phuong"
date: "23 January 2025" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
  warning: false
---

# Overview

This hands-on exercise provides practical experience in using the following R packages:

-   ggstatsplot: To create visually rich statistical graphics.

-   performance: To visualize model diagnostics and assess model performance.

-   parameters: To visualize model parameters and their uncertainties.

# Visual Statistical Analysis with ggstatsplot

**ggstatsplot** is an extension package for **ggplot2** that specializes in creating information-rich plots that incorporate statistical test details directly within the visualization. It offers 2 key functionalities:

-   Alternative Statistical Methods: By default, `ggstatsplot` provides alternative statistical inference methods compared to base `ggplot2`.

-   Best Practices in Reporting: The package adheres to the APA (American Psychological Association) style guide, considered a gold standard for statistical reporting. This ensures plots generated by `ggstatsplot` follow best practices in presenting statistical test results.

![](data/image22.jpg)

# Getting Started

## Installing and launching R packages

The below code chunk loads **ggstatsplot** and **tidyverse** into R environment.

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

## Importing data

The code chunk below uses `read_csv()`of [**readr**](#0) package to import *Exam_data.csv* into R and saved it into a tibble data.frame.

```{r}
exam <- read_csv("data/Exam_data.csv")
exam
```

## One-sample test: *gghistostats()* method

The code chunk below uses [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) to build a visual of one-sample test on English scores.

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

Default information from above graph:

-   Statistical details

-   Bayes Factor

-   Sample sizes

-   Distribution summary

## Unpacking the Bayes Factor

The Bayes factor is a crucial concept in Bayesian statistics. It quantifies the strength of evidence in favor of one hypothesis (H1, the alternative hypothesis) compared to another (H0, the null hypothesis). This ratio allows for the evaluation of data in the context of both the null hypothesis and prior beliefs or external information. When comparing H1 and H0, the Bayes factor is typically denoted as B10 and defined mathematically as.

![](data/image5.jpg)

The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) provides a relatively straightforward method for approximating the Bayes factor.

## How to interpret Bayes Factor

A **Bayes Factor** can be any positive number. One of the most common interpretations first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](#0) in 2013.

![](data/image6.jpg)

## Two-sample mean test: *ggbetweenstats()*

The code chunk below use [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) to build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

Default information: statistical details, Bayes Factor, sample sizes, distribution summary

## Oneway ANOVA Test: *ggbetweenstats()* method

The code chunk below uses [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) to build a visual for One-way ANOVA test on English score by race.

```{r}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

-   “ns” → only non-significant

-   “s” → only significant

-   “all” → everything

### ggbetweenstats - Summary of tests

![](data/image7.jpg)

![](data/image8.jpg)

![](data/image9.jpg)

## Significant Test of Correlation: *ggscatterstats()*

The code chunk below uses [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

## Significant Test of Association (Depedence) : *ggbarstats()* methods

The code chunk below bins the Maths scores into a 4-class variable using [*cut()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).

```{r}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

Next we use [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) to build a visual for Significant Test of Association.

```{r}
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```

# Visualising Models

This section focuses on leveraging the `parameters` package to visualize model diagnostics and parameters. We will utilize the Toyota Corolla case study as an example, where the objective is to build a model that predicts used-car prices based on a set of explanatory variables.

# Getting Started

## Installing and loading the required libraries

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

## Importing Excel file: readxls methods

In the code chunk below, [*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

Note that the output object `car_resale` is a tibble data frame.

## Multiple Regression Model using lm()

The code chunk below calibrates a multiple linear regression model using *lm()* of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

## Model Diagnostic: checking for multicollinearity

The code chunk below uses [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/index.html) package to calculate multicollinearity of the derived model.

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

## Model Diagnostic: checking normality assumption

The code chunk below uses [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/index.html) package to calculate multicollinearity of the derived model.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{r}
plot(check_n)
```

## Model Diagnostic: Check model for homogeneity of variances

The code chunk uses [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/index.html) package.

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

## Model Diagnostic: Complete check

We can also perform the complete check using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r}
check_model(model1)
```

## Visualising Regression Parameters: see methods

In the code below, `plot()` of **see** package and `parameters()` of **parameters** package are used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

## Visualising Regression Parameters: *ggcoefstats()* methods

The code below uses [*ggcoefstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of **ggstatsplot** package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot")
```
