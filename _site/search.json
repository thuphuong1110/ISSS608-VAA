[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Application (ISSS608)",
    "section": "",
    "text": "1 Welcome to my Visual Analytics Learning Journey\nHello there! I am Phuong. Welcome to my ISSS608 Visual Analytics and Application homepage. This course is taught by Prof KAM Tin Seong as part of my Master of IT in Business program at Singapore Management University. In this website, you will find my coursework prepared for this course, encompassing practical application of different techniques to transform and analyze data."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "This hands-on exercise introduces the fundamental principles and key components of ggplot2. We will explore how to to create statistical graphics using the Layered Grammar of Graphics principle. By the end, we will apply ggplot2’s essential graphical elements to produce elegant and informative statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-load-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-load-the-required-libraries",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2.1 Install and load the required libraries",
    "text": "2.1 Install and load the required libraries\nTo begin, we’ll check for the necessary R packages. If they are installed, we’ll load them. Otherwise, we’ll install and then load them into the R environment.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2.2 Import data",
    "text": "2.2 Import data\nThe code chunk below imports exam_data.csv into R environment using read_csv() function of readr package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset includes year end examination grades of a cohort of primary 3 students from a local school. There are a total of 7 attributes. 4 of them are categorical data type and the other 3 are continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.1 R Graphics VS ggplot",
    "text": "3.1 R Graphics VS ggplot\nFirst we compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplots\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk is relatively straightforward when using R’s base graphics. This raises the question: why is ggplot2 often recommended?\nAs Hadley Wickham explains, the advantage of ggplot2 lies not just in its syntax for creating plots, but in the conceptual framework it introduces. ggplot2 teaches a powerful way of thinking about data visualization—mapping variables to the visual properties of geometric objects in a structured and meaningful way. This approach fosters a deeper understanding of visualization as a tool for effectively communicating data insights."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "4.1 A Layered Grammar of Graphics",
    "text": "4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. The figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nEach component plays a vital role in constructing meaningful and flexible visualizations. Below is a brief description of each building block:\n\nData: The dataset that serves as the foundation for the visualization.\nAesthetics: Map data attributes to visual properties such as position, color, size, shape, or transparency, allowing the graph to communicate meaningful patterns.\nGeometries: Define the visual representation of data points, such as points, bars, lines, or other shapes.\nFacets: Subdivide the data into subsets, enabling the creation of multiple panels or variations of the same graph.\nStatistics: Apply transformations or summaries to the data, such as calculating means, medians, or confidence intervals, to highlight key insights.\nCoordinate Systems: Determine the plane or framework in which the data is displayed, such as Cartesian or polar coordinates.\nThemes: Customize non-data elements of the plot, such as the titles, axis labels, gridlines, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.1 Geometric Objects: geom_bar",
    "text": "7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.2 Geometric Objects: geom_dotplot",
    "text": "7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\nNote: The y scale is not very useful, in fact it is very misleading.\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.3 Geometric Objects: geom_histogram()",
    "text": "7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.4 Modifying a geometric object by changing geom()",
    "text": "7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.5 Modifying a geometric object by changing aes()",
    "text": "7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.6 Geometric Objects: geom-density()",
    "text": "7.6 Geometric Objects: geom-density()\ngeom_density() computes and visualizes a kernel density estimate, offering a smoothed alternative to histograms. It is particularly useful for continuous data that originates from an underlying smooth distribution, providing a more refined representation of the data’s probability density.\nThe following example demonstrates how to use geom_density() to plot the distribution of Math scores as a kernel density estimate.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.7 Geometric Objects: geom_boxplot",
    "text": "7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.8 Geometric Objects: geom_violin",
    "text": "7.8 Geometric Objects: geom_violin\ngeom_violin() is used to create violin plots, which are effective for comparing multiple data distributions. Unlike ordinary density curves, which can become visually cluttered when comparing more than a few distributions, violin plots arrange distributions side by side for clearer comparison. This makes them especially useful for visualizing and comparing grouped or categorized data.\nThe example below illustrates how to use geom_violin() to plot the distribution of Math scores by gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.9 Geometric Objects: geom_point()",
    "text": "7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7.10 geom objects can be combined",
    "text": "7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.1 Working with stat()",
    "text": "8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.2 Working with stat - the stat_summary() method",
    "text": "8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary()function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.3 Working with stat - the geom() method",
    "text": "8.3 Working with stat - the geom() method\nThe code chunk below adds mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8.4 Adding a best fit curve on a scatterplot?",
    "text": "8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nNote: The default method used is loess.\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9.1 Working with facet_wrap()",
    "text": "9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9.2 facet_grid() function",
    "text": "9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10.1 Working with Coordinate",
    "text": "10.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10.2 Changing the y- and x-axis range",
    "text": "10.2 Changing the y- and x-axis range\nThe below scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "11.1 Working with theme",
    "text": "11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we will explore several ggplot2 extensions designed to create more refined and impactful statistical graphics. By the end of this exercise, you will be able to:\n\nControl annotation placement on graphs using functions from the ggrepel package.\nDesign professional, publication-quality figures with functions from the ggthemes and hrbrthemes packages.\nCombine multiple ggplot2 graphs into composite figures using the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-the-required-libraries",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.1 Install and load the required libraries",
    "text": "2.1 Install and load the required libraries\nIn this exercise, in addition to the tidyverse, four R packages will be utilized:\n\nggrepel: Provides geoms for ggplot2 to prevent overlapping text labels.\nggthemes: Offers extra themes, geoms, and scales to enhance ggplot2 visualizations.\nhrbrthemes: Focuses on typography-centric themes and components for ggplot2.\npatchwork: Facilitates the creation of composite figures by combining multiple ggplot2 graphs.\n\nThe code chunk below checks if these packages are installed and load them into your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\nFor this exercise, we will use a data file named Exam_data, which contains year-end examination grades for a cohort of Primary 3 students from a local school. The file is in CSV format.\nThe code chunk below demonstrates how to import Exam_data.csv into the R environment using the read_csv() function from the readr package, which is part of the tidyverse collection.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe exam_data tibble consists of seven attributes, with four being categorical and three continuous:\n\nCategorical attributes: ID, CLASS, GENDER, and RACE.\nContinuous attributes: MATHS, ENGLISH, and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3.1 Working with ggrepel",
    "text": "3.1 Working with ggrepel\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbthems package",
    "text": "4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe PlotThe Code\n\n\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe PlotThe Code\n\n\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nIn the code chunk above:\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: pathwork methods",
    "text": "5.1 Creating Composite Graphics: pathwork methods\nSeveral ggplot2 extensions provide functions for creating composite figures by combining multiple graphs. Notable examples include grid.arrange() from the gridExtra package and plot_grid() from the cowplot package. In this section, we will focus on the patchwork package, a ggplot2 extension specifically designed for combining separate ggplot2 graphs into a single figure.\nThe patchwork package features a simple and intuitive syntax that makes creating layouts straightforward. Key elements of its syntax include:\n\nUsing the + operator to create a two-column layout.\nUtilizing parentheses () to group subplots.\nEmploying the / operator to arrange graphs in a two-row layout."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple is the syntax used to create the plot!\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\nWe can plot more complex composite using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more about plot operators, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.5 Creating figure with insert",
    "text": "5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: patchwork methods",
    "text": "5.1 Creating Composite Graphics: patchwork methods\nSeveral ggplot2 extensions provide functions for creating composite figures by combining multiple graphs. Notable examples include grid.arrange() from the gridExtra package and plot_grid() from the cowplot package. In this section, we will focus on the patchwork package, a ggplot2 extension specifically designed for combining separate ggplot2 graphs into a single figure.\nThe patchwork package features a simple and intuitive syntax that makes creating layouts straightforward. Key elements of its syntax include:\n\nUsing the + operator to create a two-column layout.\nUtilizing parentheses () to group subplots.\nEmploying the / operator to arrange graphs in a two-row layout."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbrthemes package",
    "text": "4.2 Working with hrbrthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nIn the code chunk above:\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we explore how to create interactive data visualisation by functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "4.1 Tooltip effect with tooltip aesthetic",
    "text": "4.1 Tooltip effect with tooltip aesthetic\nBelow is a typical code chunk to plot an interactive statistical graph using ggiraph package. Notice that the code chunk consists of two parts:\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that 2 steps are involved:\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) is used to create the basic graph.\nNext, girafe() is used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "5.1 Displaying multiple information on tooltip",
    "text": "5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the below code chunk.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the above code chunk create a new field called tooltip, populating text in ID and CLASS fields into this newly created field. Next, this newly created field is used as a tooltip field as shown in the code line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.1 Customising Tooltip style",
    "text": "6.1 Customising Tooltip style\nThe code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is white and the font colour is black and bold.\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.2 Displaying statistics on tooltip",
    "text": "6.2 Displaying statistics on tooltip\nThe code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confidence interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.3 Hover effect with data_id aesthetic",
    "text": "6.3 Hover effect with data_id aesthetic\nThe code chunk below shows the second interactive feature of ggiraph, namely data_id, whereas elements associated with data_id (i.e. CLASS) will be highlighted upon mouse hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#styling-hover-effect",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.4 Styling hover effect",
    "text": "6.4 Styling hover effect\nThe code chunk below uses css codes to change the highlighting effect. Elements associated with data_id (i.e. CLASS) will be highlighted upon mouse hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.5 Combining tooltip and hover effect",
    "text": "6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the below code chunk. Elements associated with data_id (i.e. CLASS) will be highlighted upon mouse hover. The tooltip also shows the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.6 Click effect with onclick",
    "text": "6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.\nThe code chunk below shows an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nNote: click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "6.7 Coordinated Multiple Views with ggiraph",
    "text": "6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods is implemented in the data visualisation below.\nNotice that when a data point in one dot plot is selected, the corresponding data point ID in the second visualization is also highlighted.\n\n\n\n\n\n\nTo build coordinated multiple views as demonstrated in the example above, the following approach will be implemented:\n\nUtilize the interactive functions provided by the ggiraph package to create the multiple views.\nCombine these views using the patchwork functions from the patchwork package within the girafe function to enable interactive, coordinated visualizations.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example of a basic interactive plot created using plot_ly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "7.2 Working with visual variable: plot_ly() method",
    "text": "7.2 Working with visual variable: plot_ly() method\nThe code chunk below maps the color argument to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nInteractivity: Click on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "7.3 Creating an interactive scatter plot: ggplotly() method\nThe below code chunk plots an interactive scatter plot using ggplotly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line we need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "7.4 Coordinated Multiple Views with plotly",
    "text": "7.4 Coordinated Multiple Views with plotly\nCreating a coordinated linked plot using Plotly involves three key steps:\n\nUse the highlight_key() function from the Plotly package to define shared data for interactivity.\nCreate two scatterplots using ggplot2 functions.\nUse the subplot() function from the Plotly package to arrange the scatterplots side-by-side.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nYou can click on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nKey takeaways from the code chunk:\n\nThe highlight_key() function creates an object of the class crosstalk::SharedData, enabling interactivity and linking across multiple plots.\nFor more information about crosstalk, refer to the documentation available at this link"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "8.1 Interactive Data Table: DT package",
    "text": "8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "8.2 Linked brushing: crosstalk method",
    "text": "8.2 Linked brushing: crosstalk method\n\nThe PlotThe Code\n\n\n\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe below code chunk implements the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nKey points to understand from the code chunk:\n\nhighlight(): A function in the plotly package that allows brushing (highlighting) across multiple plots. It is primarily intended for linking multiple plotly graphs. While it can integrate with other htmlwidget packages via crosstalk, the behavior may vary. Certain htmlwidgets (e.g., leaflet) respect options like persistent selection.\nbscols(): A utility function from the crosstalk package, designed to arrange HTML elements side by side. It is particularly useful in R Markdown documents but can also be used directly in the R console.\n\nCaution: Using bscols() will incorporate the entire Bootstrap framework into your document."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#ggiraph",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "9.1 ggiraph",
    "text": "9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex031.html#plotly-for-r",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "9.2 plotly for R",
    "text": "9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Animated graphics can capture the audience’s attention and leave a lasting impression, making them highly effective for visually-driven data storytelling. In this hands-on exercise, you will learn to create animated data visualizations using the gganimate and plotly R packages. Additionally, you’ll explore how to:\n\nReshape data with the tidyr package.\nProcess, wrangle, and transform data using the dplyr package.\n\n\n\nAnimations in data visualization work by sequentially displaying individual plots, which are then stitched together to create a movie-like effect, much like a flipbook or traditional cartoon. Each frame represents a different subset of the data, driving the perceived motion when combined.\n\n\n\n\nBefore creating animated visualizations, it’s essential to understand the following concepts:\n\nFrame: Each frame represents a specific time point or category. As the frame changes, the graph updates to reflect new data.\nAnimation Attributes: These settings control the animation’s behavior, such as frame duration, transition easing functions, and starting points (current frame vs. beginning).\n\nTip: Consider whether an animated graphic adds value to your analysis. For exploratory data analysis, animations might not justify the effort. However, in presentations, well-placed animations can significantly enhance engagement and comprehension."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Animations in data visualization work by sequentially displaying individual plots, which are then stitched together to create a movie-like effect, much like a flipbook or traditional cartoon. Each frame represents a different subset of the data, driving the perceived motion when combined."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#terminology",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before creating animated visualizations, it’s essential to understand the following concepts:\n\nFrame: Each frame represents a specific time point or category. As the frame changes, the graph updates to reflect new data.\nAnimation Attributes: These settings control the animation’s behavior, such as frame duration, transition easing functions, and starting points (current frame vs. beginning).\n\nTip: Consider whether an animated graphic adds value to your analysis. For exploratory data analysis, animations might not justify the effort. However, in presentations, well-placed animations can significantly enhance engagement and comprehension."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "2.1 Loading the R packages",
    "text": "2.1 Loading the R packages\nThe code chunk below checks if the below packages are installed and load them into your working R environment.\n\nplotly: For creating interactive statistical graphs.\ngganimate: A ggplot2 extension for creating animations.\ngifski: Converts video frames into high-quality GIFs using efficient color palette techniques.\ngapminder: Includes Gapminder data, particularly for country color schemes.\ntidyverse: A suite of R packages for data science, including tools for creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#importing-the-data",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nIn this exercise, we’ll use the Data worksheet from the GlobalPopulation Excel workbook. The below code chunk imports this data into R environment using appropriate package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nKey learnings from the abobe code chunk:\n\nread_xls() from the readxl package is used to import Excel worksheets.\nmutate_each_() from dplyr converts all character data types to factors.\nmutate() from dplyr converts the values in the Year column to integers for proper handling in plots.\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "3.1 Building a static population bubble plot",
    "text": "3.1 Building a static population bubble plot\nThe code chunk below uses the basic ggplot2 functions to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "3.2 Building the animated bubble plot",
    "text": "3.2 Building the animated bubble plot\nThe following code chunk demonstrates key animation techniques:\n\ntransition_time() : A function from gganimate that creates transitions across distinct time states, such as Year.\nease_aes(): Controls the easing of aesthetics during transitions. By default, easing is linear, but other methods include quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce, allowing for smoother or more dynamic effects.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we explore how to create an animated bubble plot using ggplotly() method.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider to control the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\nKey takeaways from the code chunk above:\n\nStatic Bubble Plot Creation: The code employs appropriate ggplot2 functions to construct a static bubble plot, which is stored as an R object named gg.\nAnimation Conversion: The ggplotly() function is used to transform the static R graphic object into an animated SVG object, enabling interactivity and animation.\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the below plot and code chunk.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex032.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we explore how to create an animated bubble plot using plot_ly() method.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "",
    "text": "Visualizing distributions is a fundamental aspect of statistical analysis. While Chapter 1 introduced common methods like histograms, density curves, boxplots, notch plots, and violin plots using ggplot2, this chapter explores two relatively new and effective techniques: ridgeline plots and raincloud plots. We will demonstrate how to create these visualizations using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, we will utilize the following R packages:\n\nggridges: For creating ridgeline plots.\nggdist: For visualizing distributions and uncertainty.\ntidyverse: A collection of R packages for data science and visualization.\nggthemes: To access additional themes, scales, and geoms for ggplot2.\ncolorspace: To provide a comprehensive toolbox for color selection and manipulation.\n\nThe code chunk below loads these packages into Rstudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#data-import",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nExam_data.csv will be used for this exercise.\nThe code chunk below uses read_csv() of readr package to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.1 Plotting ridgeline graph: ggridges method",
    "text": "3.1 Plotting ridgeline graph: ggridges method\nSeveral methods exist for creating ridgeline plots in R. This section focuses on using ggridges package, which provides two primary geoms for this purpose:\n\ngeom_ridgeline(): This geom directly uses height values to draw the ridgelines.\ngeom_density_ridges(): This geom first estimates data densities and then draws the ridgelines based on these density estimates.\n\nThe following ridgeline plot is created using geom_density_ridges()\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.2 Varying fill colors along the x axis",
    "text": "3.2 Varying fill colors along the x axis\nSometimes we desire ridgeline plots where the area under each curve is not filled with a single solid color but rather with a gradient of colors along the x-axis. This effect can be achieved using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). These functions operate similarly to geom_ridgeline() and geom_density_ridges(), respectively, but with the added capability of varying fill colors. However, it’s important to note that these functions currently do not support both changing fill colors and transparency simultaneously.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.3 Mapping the probabilities directly onto colour",
    "text": "3.3 Mapping the probabilities directly onto colour\nThe ggridges package not only provides specialized geoms for creating ridgeline plots but also offers stat_density_ridges(), a function that replaces stat_density() from ggplot2. This function is specifically designed for use within the ggridges package.\nThe figure below illustrates a ridgeline plot created by mapping the probabilities calculated using stat(ecdf), which represents the empirical cumulative density function for the distribution of English scores.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.4 Ridgeline plots with quantile lines",
    "text": "3.4 Ridgeline plots with quantile lines\nUsing geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile using the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of defining quantiles using numerical values, we can specify them by cut points such as 2.5% and 97.5% to color the ridgeline plot. This approach highlights the tails of the distribution, providing insights into extreme values.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "4.1 Plotting a Half Eye graph",
    "text": "4.1 Plotting a Half Eye graph\nWe start by plotting a Half-Eye graph using stat_halfeye() from the ggdist package. This function creates a visualization that includes a half-density plot and a slab interval.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\nNote: The slab interval can be removed by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.2 Adding the boxplot with geom_boxplot()\nNext, we add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot with reduced width and adjusted opacity.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.3 Adding the Dot Plots with stat_dots()\nTo enhance the visualization, we incorporate a third geometric layer using stat_dots() from the ggdist package. This creates a half-dotplot, which resembles a histogram and visually represents the number of samples (dots) within each bin. By setting side = \"left\", we position the dotplot to the left-hand side of the raincloud plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex041.html#finishing-touch",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "4.4 Finishing touch",
    "text": "4.4 Finishing touch\nFinally, coord_flip() from the ggplot2 package is employed to rotate the raincloud plot horizontally, creating the characteristic raincloud shape. Additionally, theme_economist() from the ggthemes package is applied to enhance the visual appeal of the plot, providing a professional and publication-ready aesthetic.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "",
    "text": "This hands-on exercise provides practical experience in using the following R packages:\n\nggstatsplot: To create visually rich statistical graphics.\nperformance: To visualize model diagnostics and assess model performance.\nparameters: To visualize model parameters and their uncertainties."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.1 Installing and launching R packages",
    "text": "3.1 Installing and launching R packages\nThe below code chunk loads ggstatsplot and tidyverse into R environment.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#importing-data",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.2 Importing data",
    "text": "3.2 Importing data\nThe code chunk below uses read_csv()of readr package to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\nexam\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.3 One-sample test: gghistostats() method",
    "text": "3.3 One-sample test: gghistostats() method\nThe code chunk below uses gghistostats() to build a visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information from above graph:\n\nStatistical details\nBayes Factor\nSample sizes\nDistribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#unpacking-the-bayes-factor",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.4 Unpacking the Bayes Factor",
    "text": "3.4 Unpacking the Bayes Factor\nThe Bayes factor is a crucial concept in Bayesian statistics. It quantifies the strength of evidence in favor of one hypothesis (H1, the alternative hypothesis) compared to another (H0, the null hypothesis). This ratio allows for the evaluation of data in the context of both the null hypothesis and prior beliefs or external information. When comparing H1 and H0, the Bayes factor is typically denoted as B10 and defined mathematically as.\n\nThe Schwarz criterion provides a relatively straightforward method for approximating the Bayes factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.5 How to interpret Bayes Factor",
    "text": "3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.6 Two-sample mean test: ggbetweenstats()",
    "text": "3.6 Two-sample mean test: ggbetweenstats()\nThe code chunk below use ggbetweenstats() to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: statistical details, Bayes Factor, sample sizes, distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "3.7 Oneway ANOVA Test: ggbetweenstats() method\nThe code chunk below uses ggbetweenstats() to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n3.7.1 ggbetweenstats - Summary of tests"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "3.8 Significant Test of Correlation: ggscatterstats()\nThe code chunk below uses ggscatterstats() to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nThe code chunk below bins the Maths scores into a 4-class variable using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nNext we use ggbarstats() to build a visual for Significant Test of Association.\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.1 Installing and loading the required libraries",
    "text": "5.1 Installing and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#importing-excel-file-readxls-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#importing-excel-file-readxls-methods",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.2 Importing Excel file: readxls methods",
    "text": "5.2 Importing Excel file: readxls methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model          Price Age_08_04 Mfg_Month Mfg_Year    KM Fuel_Type    HP\n   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1     1 TOYOTA Coroll… 13500        23        10     2002 46986 Diesel       90\n 2     2 TOYOTA Coroll… 13750        23        10     2002 72937 Diesel       90\n 3     3  TOYOTA Corol… 13950        24         9     2002 41711 Diesel       90\n 4     4 TOYOTA Coroll… 14950        26         7     2002 48000 Diesel       90\n 5     5 TOYOTA Coroll… 13750        30         3     2002 38500 Diesel       90\n 6     6 TOYOTA Coroll… 12950        32         1     2002 61000 Diesel       90\n 7     7  TOYOTA Corol… 16900        27         6     2002 94612 Diesel       90\n 8     8 TOYOTA Coroll… 18600        30         3     2002 75889 Diesel       90\n 9     9  TOYOTA Corol… 21500        27         6     2002 19700 Petrol      192\n10    10  TOYOTA Corol… 12950        23        10     2002 71138 Diesel       69\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Met_Color &lt;dbl&gt;, Color &lt;chr&gt;, Automatic &lt;dbl&gt;, CC &lt;dbl&gt;,\n#   Doors &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Gears &lt;dbl&gt;, Quarterly_Tax &lt;dbl&gt;,\n#   Weight &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;, BOVAG_Guarantee &lt;dbl&gt;,\n#   Guarantee_Period &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNote that the output object car_resale is a tibble data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.3 Multiple Regression Model using lm()",
    "text": "5.3 Multiple Regression Model using lm()\nThe code chunk below calibrates a multiple linear regression model using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-checking-for-multicollinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-checking-for-multicollinearity",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.4 Model Diagnostic: checking for multicollinearity",
    "text": "5.4 Model Diagnostic: checking for multicollinearity\nThe code chunk below uses check_collinearity() of performance package to calculate multicollinearity of the derived model.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.5 Model Diagnostic: checking normality assumption",
    "text": "5.5 Model Diagnostic: checking normality assumption\nThe code chunk below uses check_collinearity() of performance package to calculate multicollinearity of the derived model.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.6 Model Diagnostic: Check model for homogeneity of variances",
    "text": "5.6 Model Diagnostic: Check model for homogeneity of variances\nThe code chunk uses check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-complete-check",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.7 Model Diagnostic: Complete check",
    "text": "5.7 Model Diagnostic: Complete check\nWe can also perform the complete check using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.8 Visualising Regression Parameters: see methods",
    "text": "5.8 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package are used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4.2: Visual Statistical Analysis",
    "section": "5.9 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "5.9 Visualising Regression Parameters: ggcoefstats() methods\nThe code below uses ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "Visualizing uncertainty is a crucial aspect of statistical analysis. This chapter provides hands-on experience in creating informative statistical graphics that effectively communicate uncertainty, including:\n\nPlot statistical error bars: Utilize ggplot2\nCreate interactive error bars: Combine ggplot2, plotly, and DT\nAdvanced techniques: Using ggdist package\nGenerate Hypothetical Outcome Plots (HOPs): Utilize ungeviz package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nImproved Paragraph:\nFor this exercise, we will utilize the following R packages:\n\ntidyverse: A collection of R packages for data science tasks, including data manipulation, transformation, and visualization.\nplotly: For creating interactive and dynamic plots.\ngganimate: For generating animated plots that showcase changes over time or different conditions.\nDT: For displaying interactive HTML tables, enabling features like sorting, filtering, and searching.\ncrosstalk: For implementing cross-widget interactions, such as linked brushing and filtering, to explore data relationships across different visualizations.\nggdist: For visualizing distributions and uncertainty in a visually appealing and informative manner.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#data-import",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nExam_data.csv will be used for this exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "3.1 Plotting standard error bars of point estimates",
    "text": "3.1 Plotting standard error bars of point estimates\nNow we can plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\nKey takeaways from the above code chunk\n\nThe error bars are computed using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "3.2 Plotting confidence interval of point estimates",
    "text": "3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\nKey takeaways from the above code chunk\n\nThe confidence intervals are computed using the formula mean+/-1.96*se.\nThe error bars is sorted using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we explore how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex043.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nIn the code chunk below, the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nNext we plot using the mean and 99% confidence interval.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.99,\n                     .point = mean,\n                     .interval = qi,\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nNote: This function comes with many arguments, it is recommended to read the syntax reference for more details\nThe code chunk below uses stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nNote: This function comes with many arguments, it is recommended to read the syntax reference for more details"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "A funnel plot is a specialized data visualization tool designed for making unbiased comparisons between outlets, stores, or business entities. This hands-on exercise provides practical experience in:\n\nCreating funnel plots using the funnelPlotR package.\nGenerating static funnel plots with ggplot2.\nDeveloping interactive funnel plots by combining plotly and ggplot2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "4.1 FunnelPlotR methods: The basic plot",
    "text": "4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nKey Takeaways from the Code Chunk:\n\nGroup Definition: Unlike in a scatterplot, the group argument here determines the level at which data points are plotted (e.g., Sub-district, District, or City). If “City” is selected, only six data points will be displayed.\nData Type: The data_type argument defaults to \"SR\".\nPlot Limits (limit): Defines confidence limits for the funnel plot. Acceptable values are 95 (95% confidence interval) or 99 (99.8% confidence interval)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "4.2 FunnelPlotR methods: Makeover 1",
    "text": "4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nKey takeaways from the above code chunk:\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\nxrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "4.3 FunnelPlotR methods: Makeover 2",
    "text": "4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nKey arguments from the above code chunk:\n\nlabel = NA removes the default label outliers feature.\ntitle adds plot title.\nx_label and y_label add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "5.1 Computing the basic derived fields",
    "text": "5.1 Computing the basic derived fields\nFirst we derive cumulative death rate and standard error of cumulative death rate using below code chunk.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, fit.mean is computed using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe below code chunk below computes the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "5.3 Plotting a static funnel plot",
    "text": "5.3 Plotting a static funnel plot\nThe code chunk below uses ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex044.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4.4: Funnel Plots for Fair Comparisons",
    "section": "5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "",
    "text": "The correlation coefficient is a widely used statistical measure that quantifies the type and strength of the relationship between two variables. The coefficient ranges from -1.0 to 1.0:\n\n1.0 indicates a perfect positive linear relationship.\n-1.0 indicates a perfect negative (inverse) linear relationship.\n0.0 indicates no linear relationship between the variables.\n\nWhen analyzing multivariate data, pairwise correlation coefficients are typically displayed in a structured format called a correlation matrix or scatterplot matrix.\nThere are three key reasons to computing a correlation matrix:\n\nUnderstanding Relationships – Reveals pairwise relationships between high-dimensional variables.\nInput for Further Analyses – Used in exploratory factor analysis, confirmatory factor analysis, structural equation modeling, and linear regression (especially when handling missing values pairwise).\nDiagnostic Tool – Helps assess data relationships before conducting statistical modeling. For example, high correlations may indicate multicollinearity, which can make regression estimates unreliable.\n\nWhen working with large datasets (many observations and variables), a Corrgram is useful for visually exploring correlations. A corrgram organizes data using two main principles:\n\nDepicting correlation values – Uses color or shape to represent both sign and magnitude of correlations.\nReordering variables – Groups “similar” variables adjacently for better interpretability.\n\nThis exercise is divided into three key sections:\n\nCreating a Correlation Matrix – Using the pairs() function from R Graphics.\nPlotting a Corrgram – Using the corrplot package.\nBuilding an Interactive Correlation Matrix – Using the Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#importing-data",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "3.1 Importing Data",
    "text": "3.1 Importing Data\nFirst we import the data into R using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nNote that beside quality and type, the rest of the variables are continuous numerical data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "4.1 Building a basic correlation matrix",
    "text": "4.1 Building a basic correlation matrix\nThe figure below shows the scatter plot matrix of Wine Quality Data.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe pairs() function requires input in the form of a matrix or data frame. Creating a scatterplot matrix using this function is straightforward.\nIn the following code chunk, the pairs() function is applied to columns 2 to 12 of the wine data frame. These columns represent key variables such as fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol. The resulting scatterplot matrix helps visualize pairwise relationships among these variables.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "4.2 Drawing the lower corner",
    "text": "4.2 Drawing the lower corner\nThe pairs() function in R Graphics offers various customization options. One common practice is to display only the upper or lower half of the correlation matrix, rather than both, since the matrix is symmetric.\nTo visualize only the lower half of the correlation matrix, the upper.panel argument is used. The following code chunk demonstrates this approach, allowing for a cleaner and more interpretable scatterplot matrix.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, we can display the upper half of the correlation matrix using the code chunk below.\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#including-with-correlation-coefficients",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "4.3 Including with correlation coefficients",
    "text": "4.3 Including with correlation coefficients\nTo display the correlation coefficient for each pair of variables instead of scatterplots, the panel.cor function can be used. This function also scales the font size according to the magnitude of the correlation, making it easier to interpret higher correlations at a glance.\nFor now, simply enter the code into your R session or script and explore the results. Next, we’ll look at a more engaging way to visualize the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#the-basic-plot",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.1 The basic plot",
    "text": "5.1 The basic plot\nOne key advantage of using ggcorrmat() from the ggstatsplot package is its ability to generate a comprehensive and professional statistical report alongside the correlation matrix, as illustrated in the example below.\n\nggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nKey takeaways from the above code Chunk\n\ncor.vars: Specifies the variables used to compute the correlation matrix required for constructing the corrgram.\nggcorrplot.args: Provides additional (mainly aesthetic) arguments passed to ggcorrplot::ggcorrplot(). However, it should exclude certain arguments (corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, and digits), as these are already internally handled.\n\nThe below sub-code chunk demonstrates how to fine-tune specific components of the plot, such as adjusting the font size for the x-axis, y-axis, and statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.1 Getting started with corrplot",
    "text": "7.1 Getting started with corrplot\nTo create a correlation plot (corrgram) using corrplot(), we first need to compute the correlation matrix of the wine data frame. In the code below, we use the cor() function from R’s stats package to calculate the correlation matrix of the wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual element used to plot the correlation matrix is a circle. The layout of the correlation plot (corrgram) is symmetric by default. The default color scheme is a diverging blue-red palette: blue colors represent pairs of variables with positive correlation coefficients, while red colors represent pairs with negative correlation coefficients. The intensity of the color, or saturation, indicates the strength of the correlation. Darker colors reflect a stronger linear relationship between the paired variables, while lighter colors suggest a weaker linear relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#working-with-visual-geometrics",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.2 Working with visual geometrics",
    "text": "7.2 Working with visual geometrics\nThe corrplot package offers seven visual geometrics (specified using the method parameter) to encode attribute values. These are: circle, square, ellipse, number, shade, color, and pie, with the default set to circle. As demonstrated in the previous section, the default visual geometric for the correlation plot is a circle. However, you can change this setting by using the method argument, as shown in the code snippet below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#working-with-layout",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.3 Working with layout",
    "text": "7.3 Working with layout\nThe corrplot() function supports three layout types: “full”, “upper”, and “lower”. By default, the layout is set to “full”, which displays the entire matrix. You can change this setting by using the type argument in corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the correlation plot (corrgram) can be further customized. For instance, the diag argument can be used to turn off the diagonal cells, and the tl.col argument allows you to change the color of the axis text labels to black, as demonstrated in the code and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.4 Working with mixed layout",
    "text": "7.4 Working with mixed layout\nWith the corrplot package, you can create a correlation plot (corrgram) with a mixed visual matrix—one half displaying the visual matrix and the other half showing the numerical matrix. To achieve this, use the corrplot.mixed() function, which is a wrapper for creating this mixed visualization style.\nThe figure below demonstrates a mixed layout correlation plot generated using the wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk below plots the corrgram.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that the lower and upper arguments define the visualization method for the respective halves of the correlation plot. In this case, the ellipse method is applied to the lower half of the corrgram, while the number method is used for the upper half. The tl.pos argument specifies the placement of the axis labels, and the diag argument determines the glyph displayed on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.5 Combining corrgram with the significant test",
    "text": "7.5 Combining corrgram with the significant test\nIn statistical analysis, it’s important to identify which pairs of variables have correlation coefficients that are statistically significant.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nNext we use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\nThe figure above shows a corrgram combined with a significance test. The corrgram reveals that not all correlation pairs are statistically significant. For example, the correlation between total sulfur dioxide and free sulfur dioxide is statistically significant at the 0.1 significance level, but the correlation between total sulfur dioxide and citric acid is not."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#reorder-a-corrgram",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.6 Reorder a corrgram",
    "text": "7.6 Reorder a corrgram\nMatrix reordering is crucial for uncovering hidden structures and patterns in a correlation plot (corrgram). By default, the attributes in a corrgram are sorted based on the correlation matrix (i.e., “original” order). This default can be overwritten using the order argument in corrplot(). The corrplot package currently supports four sorting methods:\n\n“AOE”: Angular order of eigenvectors (see Michael Friendly, 2002, for details).\n“FPC”: Order based on the first principal component.\n“hclust”: Order based on hierarchical clustering, with the agglomeration method specified by the hclust.method argument. The available agglomeration methods are: “ward”, “single”, “complete”, “average”, “mcquitty”, “median”, and “centroid”.\n“alphabet”: Alphabetical order.\n\nThese four sorting methods—“AOE”, “FPC”, “hclust”, and “alphabet”—are available, but more algorithms can be found in the seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex052.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "7.7 Reordering a correlation matrix using hclust",
    "text": "7.7 Reordering a correlation matrix using hclust\nUsing hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps use color variations to visualize multivariate data in a tabular format, with variables in columns and observations in rows. They effectively highlight variance, patterns, similarities, and correlations among variables.\nIn this exercise, we explore how to create both static and interactive heatmaps in R for multivariate data analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#importing-the-data-set",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.1 Importing the data set",
    "text": "3.1 Importing the data set\nThe code chunk below use read_csv() to import WHData-2018.csv into R as a tibble data frame.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#preparing-the-data",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.2 Preparing the data",
    "text": "3.2 Preparing the data\nNext, we change the rows name to country name instead of row number using the code chunk below.\n\nrow.names(wh) &lt;- wh$Country"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#transforming-the-data-frame-into-a-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#transforming-the-data-frame-into-a-matrix",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.3 Transforming the data frame into a matrix",
    "text": "3.3 Transforming the data frame into a matrix\nThe data needs to be in data matrix format to plot the heatmap.\nThe code chunk below transforms wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.1 heatmap() of R Stats",
    "text": "4.1 heatmap() of R Stats\nThe below code chunk plots a heatmap using heatmap() of Base Stats.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote:\n\nBy default, heatmap() generates a clustered heatmap.\nTo disable row and column dendrograms, set Rowv = NA and Colv = NA.\n\nTo plot a clustered heatmap, simply use the default settings, as shown in the code below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote:\n\nThe order of rows and columns differs from the original wh_matrix because heatmap() applies clustering, grouping similar values together. Corresponding dendrograms are displayed alongside the heatmap.\nRed cells indicate smaller values, while larger values appear in a different shade.\nThe heatmap may be misleading if one variable (e.g., Happiness Score) has much higher values than others. This can make smaller values look indistinguishable.\nTo address this, normalization is needed. The scale argument allows scaling by rows or columns.\n\nThe code below normalizes the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNote: The values are scalednow, making the heatmap more interpretable. The margins argument ensures that x-axis labels are fully visible. cexRow and cexCol control the font size for y-axis and x-axis labels, respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#working-with-heatmaply",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.1 Working with heatmaply",
    "text": "5.1 Working with heatmaply\nThe code chunk below creates an interactive heatmap using basic syntax from heatmaply.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNotes\n\nUnlike heatmap(), the horizontal dendrogram in heatmaply() is positioned on the left of the heatmap.\nRow text labels are displayed on the right of the heatmap.\nLong x-axis labels are rotated 135 degrees for better readability."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#data-trasformation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#data-trasformation",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.2 Data trasformation",
    "text": "5.2 Data trasformation\nMultivariate datasets often contain variables with different measurement scales, making direct comparisons difficult. To address this, heatmaply() supports three main data transformation methods: Scaling (Standardization), Normalization and Percentilization.\n\n5.2.1 Scaling method\nWhen variables are assumed to follow a normal distribution, scaling helps standardize them by subtracting the mean and dividing by the standard deviation. This transformation ensures all variables are comparable and centered around zero.\nheatmaply() supports column-wise and row-wise scaling via the scale argument. The code chunk below demonstrates how to apply column-wise scaling in heatmaply().\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n5.2.2 Normalising method\nWhen variables come from different, possibly non-normal distributions, normalization transforms the data to a 0 to 1 scale by subtracting the minimum and dividing by the maximum of all records. This transformation preserves the shape of each variable’s distribution while making them comparable on a common scale.\nUnlike scaling, normalization is applied directly to the input dataset (e.g., wh_matrix). The code chunk below demonstrates how to normalize the dataset before generating a heatmap.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n5.2.3 Percentising method\nThe percentile transformation (percentize method) ranks variables and scales them between 0 and 1 by applying the empirical cumulative distribution function (ECDF) to each value. This means each transformed value represents the percentage of observations that have that value or lower.\nSimilar to the normalize method, percentize is applied directly to the input dataset (e.g., wh_matrix). The code chunk below demonstrates how to apply percentile transformation before generating a heatmap with heatmaply().\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#clustering-algorithm",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.3 Clustering algorithm",
    "text": "5.3 Clustering algorithm\nheatmaply provides various hierarchical clustering algorithms to group similar rows and columns in a heatmap. The key arguments include:\n\ndistfun: Defines the distance metric (default: dist). Options include \"pearson\", \"spearman\", and \"kendall\" for correlation-based clustering.\nhclustfun: Defines the hierarchical clustering method (default: hclust).\ndist_method: Specifies the distance calculation method (default: \"euclidean\"). Other options include \"manhattan\", \"canberra\", \"minkowski\", etc.\nhclust_method: Specifies the clustering linkage method (default: \"complete\"). Options include \"ward.D\", \"single\", \"average\", \"centroid\", etc."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#manual-approach",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.4 Manual approach",
    "text": "5.4 Manual approach\nThe following code demonstrates how to manually set Euclidean distance and Ward’s method (ward.D) for hierarchical clustering.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#statistical-approach",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5 Statistical approach",
    "text": "5.5 Statistical approach\nTo identify the optimal clustering method and number of clusters, the dendextend package provides two useful functions:\n\ndend_expend(): Recommends the best clustering method by evaluating the stability of different hierarchical clustering approaches.\nfind_k(): Helps determine the optimal number of clusters by analyzing the dendrogram structure.\n\nFirst the dend_expend() function is used to compare various clustering methods and suggest the most suitable one.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used as it gives the highest optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nThe figure above shows that k=3 would be good.\nThe code chunk below is composed with reference to the statistical analysis results.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#seriation",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.6 Seriation",
    "text": "5.6 Seriation\nA common limitation of hierarchical clustering is that it does not provide a definite ordering of rows and columns in the heatmap. While the dendrogram constrains the order, it does not determine the optimal arrangement for visual clarity.\nTo address this, heatmaply leverages the seriation package to optimize row and column ordering using the Optimal Leaf Ordering (OLO) algorithm.\nHow OLO Works:\n\nOLO minimizes the sum of distances between adjacent leaves in the dendrogram.\nIt reorders clusters to enhance the readability of the heatmap.\nThis optimization is similar to solving a restricted Traveling Salesman Problem (TSP) for arranging the branches of the dendrogram.\n\nApplying OLO results in a clearer, more interpretable heatmap by minimizing unnecessary reordering within clusters.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nBy default, heatmaply uses the Optimal Leaf Ordering (OLO) method, which optimizes the ordering of clusters to enhance heatmap clarity. This method runs in O(n⁴) time complexity.\nAn alternative is the Gruvaeus and Wainer (GW) heuristic, which also aims to improve ordering but operates more efficiently in certain cases.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option seriate = \"mean\" gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.7 Working with colour palettes",
    "text": "5.7 Working with colour palettes\nBy default, heatmaply uses the viridis color palette. However, users can customize the color scheme to enhance aesthetics and readability.\nIn the example below, the Blues palette from the RColorBrewer package is applied.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex053.html#the-finishing-touch",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.8 The finishing touch",
    "text": "5.8 The finishing touch\nheatmaply offers extensive customization options to enhance both statistical analysis and visual quality.\nIn the example below:\n\nk_row creates 5 row clusters.\nmargins adjusts the top margin (60) and row margin (200).\nfontsize_row and fontsize_col set row and column label sizes to 4.\nmain, xlab, and ylab define the plot title and axis labels.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are an effective way to visualize the distribution and variability of three-part compositional data. Examples include population structure (e.g., proportions of young, economically active, and aged populations) or soil composition (e.g., proportions of sand, silt, and clay). The plot is represented as a triangle, with each side scaled from 0 to 1, corresponding to one of the three components. A data point is positioned such that perpendicular lines drawn from the point to each side intersect at values representing its component proportions.\nIn this exercise, we explore how to programmatically create ternary plots in R to analyze and visualize Singapore’s population structure. The exercise consists of four key steps:\n\nInstall and load required packages: tidyverse and ggtern.\nDerive new measures: Use the mutate() function from the dplyr package to calculate three new proportions.\nCreate a static ternary plot: Utilize the ggtern() function from the ggtern package.\nBuild an interactive ternary plot: Use the plot_ly() function from the Plotly package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#the-data",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "3.1 The data",
    "text": "3.1 The data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data was downloaded and transformed into respopagsex2000to2018_tidy.csv."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#importing-data",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "3.2 Importing Data",
    "text": "3.2 Importing Data\nWe use read_csv() function to import respopagsex2000to2018_tidy.csv into R as pop_data tibble dataframe.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#preparing-the-data",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "3.3 Preparing the Data",
    "text": "3.3 Preparing the Data\nNext, we use mutate() dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#plotting-a-static-ternary-diagram",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "4.1 Plotting a static ternary diagram",
    "text": "4.1 Plotting a static ternary diagram\nThe below code chunk uses ggtern() of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#plotting-an-interative-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex051.html#plotting-an-interative-ternary-diagram",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "4.2 Plotting an interative ternary diagram",
    "text": "4.2 Plotting an interative ternary diagram\nThe code below creates an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plots are designed for visualizing multivariate numerical data, making it easier to compare multiple variables and identify relationships. Originally developed by Alfred Inselberg in the 1970s, this technique is widely used in academic and scientific analysis rather than general business reporting. As Stephen Few (2006) noted, parallel coordinates plots are most effective for interactive data exploration rather than for presenting findings to a broad audience.\nIn this hands-on exercise, we will explore:\n\nCreate static parallel coordinates plots using ggparcoord() from the GGally package.\nBuild interactive plots with the parcoords package.\nUse the parallelPlot package for further interactive visualization."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-simple-parallel-coordinates",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.1 Plotting a simple parallel coordinates",
    "text": "4.1 Plotting a simple parallel coordinates\nThe code chunk below plots a basic static parallel coordinates plot using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nThe basic parallel coordinates plot only uses two main arguments:\n\ndata: Maps the dataset (e.g., wh).\ncolumns: Selects the variables for the parallel coordinates plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.2 Plotting a parallel coordinates with boxplot",
    "text": "4.2 Plotting a parallel coordinates with boxplot\nThe basic plot may not effectively reveal insights into World Happiness measures. In this section, w4e explore how to refine the visualization using additional arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\nKey takeaways from the above code chunk\n\nThe groupColumn argument groups observations by a variable (e.g., Region) and colors the lines accordingly.\nThe scale argument uses the uniminmax method to scale each variable between 0 and 1.\nThe alphaLines argument adjusts line transparency, with a value of 0.2 in this case (valid range: 0-1).\nThe boxplot argument enables boxplots with TRUE (default: FALSE).\nThe title argument adds a title to the parallel coordinates plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-with-facet",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.3 Parallel coordinates with facet",
    "text": "4.3 Parallel coordinates with facet\nSince ggparcoord() extends the ggplot2 package, it allows integration with ggplot2 functions. In the code chunk below, facet_wrap() is used to create multiple small parallel coordinates plots, each representing a different geographical region, such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#rotating-x-axis-text-label",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.4 Rotating x-axis text label",
    "text": "4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, we rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nTo rotate x-axis text labels, axis.text.x argument of theme() function was used, specifying element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4.5 Adjusting the rotated x-axis text label",
    "text": "4.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees may cause overlap with the plot. To avoid this, the text position can be adjusted using the hjust argument within element_text() in the theme() function. The axis.text.x element is used to modify the appearance of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#the-basic-plot",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.1 The basic plot",
    "text": "5.1 The basic plot\nThe code chunk below plots an interactive parallel coordinates plot using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. We will overcome this problem in the next step."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#rotate-axis-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#rotate-axis-label",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.2 Rotate axis label",
    "text": "5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nAs the parallel plot is interactive, we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change to blues with different intensity."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#changing-the-colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#changing-the-colour-scheme",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.3 Changing the colour scheme",
    "text": "5.3 Changing the colour scheme\nWe can change the default blue colour scheme using continousCS argument as shown in the code chunk below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4 Parallel coordinates plot with histogram",
    "text": "5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we explore designing treemaps using R. The exercise consists of three sections: first, manipulating transaction data into a treemap structure using dplyr; second, plotting static treemaps with the treemap package; and third, creating interactive treemaps with the d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#importing-the-data-set",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "3.1 Importing the data set",
    "text": "3.1 Importing the data set\nThe code chunk below uses read_csv() of readr to import realis2018.csv into R as a tibble data frame called realis2018.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#data-wrangling-and-manipulation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#data-wrangling-and-manipulation",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "3.2 Data Wrangling and Manipulation",
    "text": "3.2 Data Wrangling and Manipulation\nThe realis2018 dataset is in transaction record format, which is too disaggregated for treemap visualization. To prepare it, we will:\n\nGroup records by Project Name, Planning Region, Planning Area, Property Type, and Type of Sale.\nCompute Total Units Sold, Total Area, Median Unit Price, and Median Transacted Price using appropriate summary statistics.\n\nThis transformation is performed using dplyr functions:\n\ngroup_by() to create groups based on specified variables.\nsummarise() to compute aggregated values for each group."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#grouped-summaries-without-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#grouped-summaries-without-the-pipe",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "3.3 Grouped summaries without the Pipe",
    "text": "3.3 Grouped summaries without the Pipe\nThe code chunk below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\nNote: Aggregation functions such as sum() and median() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#grouped-summaries-with-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#grouped-summaries-with-the-pipe",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "3.4 Grouped summaries with the pipe",
    "text": "3.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, |&gt;.\n\nrealis2018_summarised &lt;- realis2018 |&gt;\n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) |&gt;\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-static-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-static-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.1 Designing a static treemap",
    "text": "4.1 Designing a static treemap\nTo visualize the distribution of median unit prices and total units sold for resale condominiums by geographic hierarchy in 2017, we follow these steps:\n\nFilter the Data: Select only records related to resale condominiums from the realis2018_selected dataset.\nUse treemap(): Generate the treemap with appropriate arguments to represent median unit prices and total units sold.\n\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#using-the-basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#using-the-basic-arguments",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.2 Using the basic arguments",
    "text": "4.2 Using the basic arguments\nThe code chunk below designed a treemap by using 3 core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nKey takeaways from the 3 arguments used:\n\nindex (Hierarchy Definition)\n\nThis argument defines the hierarchical structure of the treemap.\nIt must contain at least two column names; otherwise, the treemap will not reflect a hierarchy.\nThe first column represents the highest aggregation level, the second represents the next level, and so on.\n\nvSize (Rectangle Size)\n\nThis column defines the size of each rectangle in the treemap.\nIt must contain only non-negative values since the rectangle size is based on numerical scaling.\nIn our case, Total Units Sold is a suitable choice for vSize.\n\nvColor (Color Mapping)\n\nImportant: The default color assignment in treemap() may not be meaningful.\nThe vColor argument must be used in combination with type to ensure correct color representation.\nWithout explicitly defining type, treemap() assumes type = \"index\", which colors the rectangles based on categorical groupings (e.g., planning areas).\nTo properly visualize numerical differences, set type = \"value\" and choose a numeric column for vColor (e.g., Median Unit Price)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.3 Working with vColor and type arguments",
    "text": "4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nKey Takeaways:\n\nRectangles are shaded in varying intensities of green, representing median unit prices.\nThe legend bins values into ten equal intervals (e.g., 0-5000, 5000-10000, etc.)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#colours-in-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#colours-in-treemap-package",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.4 Colours in treemap package",
    "text": "4.4 Colours in treemap package\n\nmapping & palette: Define how colors are assigned.\n“value” mapping: Uses a diverging palette (e.g., “RdYlBu”), centering 0 at a neutral color.\n“manual” mapping: Maps min to the left, max to the right, and the midpoint to a middle color."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#the-value-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#the-value-type-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.5 The “value” type treemap",
    "text": "4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nKey takeaways from the above code chunk:\n\nNo red rectangles appear in the RdYlBu palette because all median unit prices are positive.\nThe legend shows 5000 to 45000 due to default range settings, which adjust to min and max values with rounding."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#the-manual-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#the-manual-type-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.6 The “manual” type treemap",
    "text": "4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThe colour scheme used is very copnfusing, as mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative.\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#treemap-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#treemap-layout",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.7 Treemap Layout",
    "text": "4.7 Treemap Layout\ntreemap() supports two layouts: squarified (optimizes aspect ratios but ignores sorting) and pivot-by-size (maintains sorting with acceptable aspect ratios). The default is pivot-by-size."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#working-with-algorithm-argument",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#working-with-algorithm-argument",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.8 Working with algorithm argument",
    "text": "4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#using-sortid",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#using-sortid",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.9 Using sortID",
    "text": "4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-basic-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-basic-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "5.1 Designing a basic treemap",
    "text": "5.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#defining-hierarchy",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#defining-hierarchy",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "5.2 Defining hierarchy",
    "text": "5.2 Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#installing-d3treer-package",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "6.1 Installing d3treeR package",
    "text": "6.1 Installing d3treeR package\nThis sections shows you how to install a R package which is not available in cran.\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\ninstall.packages(\"devtools\")\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\nNow you are ready to launch d3treeR package\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#designing-an-interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex055.html#designing-an-interactive-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "6.2 Designing An Interactive Treemap",
    "text": "6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\nFirsttreemap() is used to build a treemap using selected variables in realis2018_summarised data.frame. The treemap created is save as object called tm.\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4: Fundamentals of Visual Analytics",
    "section": "",
    "text": "1 Install and Load R packages\n\npacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\n\n2 Import dataset\n\nexam_data = read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data=exam_data, \n       aes(y = CLASS,       \n           x= ENGLISH)) +    \n  geom_boxplot()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "According to the Center for Strategic and International Studies, the Gulf of Guinea is one of the strategic maritime regions in the world, accounting for 25% of Africa’s maritime traffic and serving as a crucial shipping zone for oil, gas, and goods to and from central and southern Africa. The region is rich in mineral oil, gas, and fishery resources, making it a key driver of economic activity and energy security for multiple nations. On any given day, around 1,500 fishing vessels, tankers, and cargo ships navigate its waters.\nEffective ship performance management is crucial for ensuring operational efficiency, cost control, and environmental sustainability in this strategic area. Optimizing fuel efficiency not only reduces expenses but also minimizes emissions, helping vessels comply with environmental regulations. Regular maintenance can enhance ship reliability, but also need to balance with the cost of maintenance. Last but not least, understanding revenue and cost factors allows ship operators to make informed decisions that maximize profitability.\n\n\n\nThis take-home exercise aims to use appropriate Exploratory Data Analysis (EDA) techniques and visualization methods to provide readers with an overview of ship performance in the Gulf of Guinea, with a focus on the below areas:\n\nExamine the profitability of different ship type and engine type combination through Revenue to Cost Ratio\nUnderstand factors affecting ship energy efficiency: Ship Type, Maintenance status and Weather condition\n\n\n\n\nFor the purpose of this analysis, the dataset Ship Performance Clustering will be used, which is a simulated but realistic dataset that captures essential operational metrics and characteristics of different ship types in the Gulf of Guinea.\nThe dataset was downloaded from Kaggle and stored in data folder under the same folder path with this Quarto document."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "According to the Center for Strategic and International Studies, the Gulf of Guinea is one of the strategic maritime regions in the world, accounting for 25% of Africa’s maritime traffic and serving as a crucial shipping zone for oil, gas, and goods to and from central and southern Africa. The region is rich in mineral oil, gas, and fishery resources, making it a key driver of economic activity and energy security for multiple nations. On any given day, around 1,500 fishing vessels, tankers, and cargo ships navigate its waters.\nEffective ship performance management is crucial for ensuring operational efficiency, cost control, and environmental sustainability in this strategic area. Optimizing fuel efficiency not only reduces expenses but also minimizes emissions, helping vessels comply with environmental regulations. Regular maintenance can enhance ship reliability, but also need to balance with the cost of maintenance. Last but not least, understanding revenue and cost factors allows ship operators to make informed decisions that maximize profitability."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "This take-home exercise aims to use appropriate Exploratory Data Analysis (EDA) techniques and visualization methods to provide readers with an overview of ship performance in the Gulf of Guinea, with a focus on the below areas:\n\nExamine the profitability of different ship type and engine type combination through Revenue to Cost Ratio\nUnderstand factors affecting ship energy efficiency: Ship Type, Maintenance status and Weather condition"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "For the purpose of this analysis, the dataset Ship Performance Clustering will be used, which is a simulated but realistic dataset that captures essential operational metrics and characteristics of different ship types in the Gulf of Guinea.\nThe dataset was downloaded from Kaggle and stored in data folder under the same folder path with this Quarto document."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "3.1 Import Data",
    "text": "3.1 Import Data\nThe below code chunk uses read_csv() to read in Ship_Performance_Dataset.csv as downloaded from Kaggle and saves under ship_raw tibble dataframe.\n\nship_raw = read_csv(\"data/Ship_Performance_Dataset.csv\")\n\nNext we use glimpse() function to have an overview of the attributes available in ship_raw.\n\nglimpse(ship_raw)\n\nRows: 2,736\nColumns: 18\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;chr&gt; \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              &lt;chr&gt; \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             &lt;chr&gt; \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      &lt;chr&gt; \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            &lt;dbl&gt; 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       &lt;chr&gt; \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   &lt;dbl&gt; 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     &lt;dbl&gt; 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n\n\nThe output shows there are 18 columns in the dataframe, including:\nCategorical features:\n\nShip_Type: Type of ship.\nRoute_Type: Shipping route type.\nEngine_Type: Type of engine.\nMaintenance_Status: Maintenance condition of the ship.\nWeather_Condition: Weather conditions during voyages.\n\nNumerical features:\n\nSpeed_Over_Ground_knots: The ship’s average speed over water, measured in knots.\nEngine_Power_kW: The engine’s power output in kilowatts.\nDistance_Traveled_nm: The total distance covered by the ship in nautical miles.\nOperational_Cost_USD: The overall operational expense per voyage in USD.\nRevenue_per_Voyage_USD: The income generated per voyage in USD.\nEfficiency_nm_per_kWh: The ship’s energy efficiency, expressed as nautical miles per kilowatt-hour.\n\nNext we check if the dataframe contains any duplicated record using anyDuplicated() function of base R.\n\nanyDuplicated(ship_raw)\n\n[1] 0\n\n\nThe below code chunk counts the number of NA values in each column using:\n\nis.na(): return TRUE if value is NA, FALSE otherwise\ncolSums(): sum across each column\n\n\ncolSums(is.na(ship_raw))\n\n                   Date               Ship_Type              Route_Type \n                      0                       0                       0 \n            Engine_Type      Maintenance_Status Speed_Over_Ground_knots \n                      0                       0                       0 \n        Engine_Power_kW    Distance_Traveled_nm            Draft_meters \n                      0                       0                       0 \n      Weather_Condition       Cargo_Weight_tons    Operational_Cost_USD \n                      0                       0                       0 \n Revenue_per_Voyage_USD   Turnaround_Time_hours   Efficiency_nm_per_kWh \n                      0                       0                       0 \n  Seasonal_Impact_Score     Weekly_Voyage_Count Average_Load_Percentage \n                      0                       0                       0 \n\n\nThe ouput reveals there are no missing values. Taking a closer look, we notice there are “None” values instead in some of the columns. The below code chunk returns the number of “None” values in each column for columns where the count is larger than 0 using summarise() and keep() functions.\n\nnone_counts &lt;- ship_raw %&gt;%\n  summarise(across(c(2:18), ~sum(. == \"None\", na.rm = TRUE))) %&gt;%\n  keep(~ . &gt; 0)\n\nnone_counts\n\n# A tibble: 1 × 5\n  Ship_Type Route_Type Engine_Type Maintenance_Status Weather_Condition\n      &lt;int&gt;      &lt;int&gt;       &lt;int&gt;              &lt;int&gt;             &lt;int&gt;\n1       136        136         136                136               136\n\n\nThe result shows there are 136 “None” values in 5 categorical columns: Ship_Type, Route_Type, Engine_Type, Maintenance_Status and Weather_Condition. We will exclude these records for relevant visualizations that use any of these columns.\nThe below code chunk creates 2 additional columns from the current dataframe and saves under a new dataframe ship using mutate() function:\n\nrev_to_cost_ratio: calculate the Revenue to cost ratio to allow for fair comparison of profitability across different ships.\nship_engine_type: provide ship type and engine type tagging for different ship type and engine type combinations.\n\n\nship &lt;- ship_raw |&gt;\n  mutate(rev_to_cost_ratio = Revenue_per_Voyage_USD/ Operational_Cost_USD) |&gt;\n  mutate(ship_engine_type = paste(Ship_Type, Engine_Type, sep = \"_\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bivariate-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bivariate-analysis",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "3.2 Bivariate Analysis",
    "text": "3.2 Bivariate Analysis\nAs the dataset contains multiple numerical features, a correlation matrix a correlation matrix provides a quick overview of potential significant relationships between variable pairs, helping identify areas for deeper analysis in the following section.\nThe below code chunk first uses cor() function to calculate the correlation matrix of numerical variables and save the result to ship.cor. Next corrplot() is used to plot the corrgram of ship.cor using method = \"number\" (to show the correlation coefficients) and type = \"lower\" (to display only the lower half of the plot)\n\nship.cor = cor(ship[,c(6:8,11:17)])\n\ncorrplot(ship.cor, \n         method = \"number\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe corrgram above indicates no significant correlations among the numerical features, as the displayed values are close to zero and shown in white.\nGiven this observation, we will not proceed with further visual analysis of numerical feature pairs in the next section, as it is unlikely that any meaningful relationships can be identified."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-by-ship-and-engine-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-by-ship-and-engine-type",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "4.1 Profitability by Ship and Engine Type",
    "text": "4.1 Profitability by Ship and Engine Type\nRidgeline plot (also known as Joyplot), is a visualization technique that effectively reveals the distribution of a numeric value across multiple groups. They present a series of density plots or histograms, aligned on the same horizontal scale with slight overlap, allowing for easy comparison of distributions between groups.\n\n4.1.1 Profitability by Ship Type\nFirst we look at the Revenue to Cost Ratio distribution by Ship Type as a profitability indicator to understand if there is any significant difference among the Ship types.\nThe below code chunk uses multiple functions to create a ridgeline plot segmenting the Revenue to Cost Ratio into four quartiles, providing insights into how different ship types perform across the distribution.\n\nggplot(): initialize the ggplot object, declare the input data frame ship (using filter() to exclude Ship Type = “None”), and fill color by quantile using stat(quantile)\nstat_density_ridges(): plot ridgeline plot with gradient filled color\nscale_fill_viridis_d(): define the colour maps to be used for rigdeline plot\nggtitle(): define main title, subtitle or caption for the plot\ntheme_ridges(): a specially designed theme to make ridgeline plot looks better\n\n\nggplot(filter(ship,Ship_Type != \"None\"),\n       aes(x = rev_to_cost_ratio, \n           y = Ship_Type, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE,\n    to = 15) +\n  scale_fill_viridis_d(name = \"Quartiles\", alpha = 0.8) +\n  ggtitle(label = \"Revenue to Cost Ratio by Ship Type\") +\n  theme_ridges(center_axis_labels = TRUE)\n\n\n\n\n\n\n\n\nKey Observations\nThe plot reveals that 75% of all ship types have a revenue-to-cost ratio below 5, covering the first three quartiles. The distributions are approximately normal, indicating operational consistency but also limited opportunities for exceptional financial performance. However, the right-skewed nature suggests that while rare, some ships achieve significantly higher profitability.\nAmong the ship types, Tankers and Fish Carriers show slightly greater representation in the higher quartiles, indicating a tendency for higher revenue relative to cost. Further analysis is needed to determine whether this advantage stems from specific routes, cargo types, or operational efficiencies that contribute to superior financial performance.\n\n\n4.1.2 Profitability by Ship and Engine Type\nSimilar to the above plot, the below code chunk uses ggplot(), stat_density_ridges(), scale_fill_viridis_d(), scale_x_continuous() and theme_ridges() to plot ridgeline plots of Revenue to Cost Ratios by Ship and engine type. Records where Engine Type is “None” or Ship Type is “None” are excluded. Additionally, we use facet_wrap() to arrange the plots into separate grid by Ship type.\n\nggplot(filter(ship, Engine_Type != \"None\", Ship_Type != \"None\"), \n       aes(x = rev_to_cost_ratio, \n           y = ship_engine_type,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE,\n    to = 15) +\n  scale_fill_viridis_d(name = \"Quartiles\", alpha = 0.8) +\n  scale_x_continuous(\n    name = \"Revenue to Cost Ratio\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL) +\n  facet_wrap(~ Ship_Type, scales = \"free_y\")+\n  ggtitle(\"Revenue to Cost Ratio by Ship Type and Engine Type\") +\n  theme_ridges(center_axis_labels = TRUE)\n\n\n\n\n\n\n\n\nKey Observations\nSimilar to the plots at ship types level, for all ship and engine types combination, the majority (75%) of revenue-to-cost ratios still fall below 5. All distributions are still right-skewed, indicating ships achieving exceptionally high profitability across al ship and engine type.\nFor Fish carrier and Tanker, Diesel-powered ships show a wider spread of the lower three quartiles, suggesting higher proportion of ships with high revenue to cost ratio compared to the other 2 engine types. For Bulk carrier and Container ship, Heavy Fuel Oil (HFO) ships display slightly higher revenue to cost ratios than diesel variants, especially in the third quartile.\nNotably for Container ship, Steam turbine-powered shows a stronger skew towards higher revenue to cost ratio, suggesting this engine type may offer higher financial performance for Container ship, potentially due to higher fuel efficiency at certain operational loads."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#energy-efficiency-analysis-by-different-factors",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#energy-efficiency-analysis-by-different-factors",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default - Ship Performance in the Gulf of Guinea",
    "section": "4.2 Energy Efficiency Analysis by different factors",
    "text": "4.2 Energy Efficiency Analysis by different factors\n\n4.2.1 Efficiency by Ship & Engine Type\nTo assess whether energy efficiency is a key driver of profitability, we analyze its relationship with the Revenue-to-Cost Ratio. In this section, we examine ship energy efficiency, measured in nautical miles per kilowatt-hour, which enables fair comparisons across different vessels.\nThe below code chunk uses ggbetweenstats() function from ggstatsplot to create violin plots and perform one-way ANOVA test to compare energy efficiency across ship types.\n\nggbetweenstats(\n  data = filter(ship, Ship_Type != \"None\"),\n  x = Ship_Type, \n  y = Efficiency_nm_per_kWh,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE) +\nggtitle(\"Energy Efficiency by Ship Type\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nKey Observations\nThe violin and box plots reveal that energy efficiency (measured in nautical miles per kWh) shows a relatively similar distribution across all ship types, with comparable spreads and medians. The ANOVA test result (p = 0.4) also suggests no statistically significant difference across ship types. All ship types exhibit bimodal or slightly skewed distributions, suggesting potential subcategories or operational conditions that influence efficiency.\nBulk Carriers have the highest mean efficiency (~0.82 nm/kWh), followed by Container Ships (~0.80 nm/kWh), Fish Carriers (~0.79 nm/kWh), and Tankers (~0.78 nm/kWh). However, the differences in mean efficiency are small, indicating that ship type alone is not a major determinant of efficiency. Given these observations, further analysis could explore other operational factors that may play a more critical role in ship’s energy efficiency.\nWe proceed to examine energy efficiency by ship and engine type.\n\nggplot(filter(ship, Engine_Type != \"None\", Ship_Type != \"None\"), \n       aes(x = Efficiency_nm_per_kWh, \n           y = ship_engine_type,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\", alpha = 0.8) +\n  scale_x_continuous(\n    name = \"Energy efficiency in nm per kWh\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL) +\n  facet_wrap(~ Ship_Type, scales = \"free_y\")+\n  ggtitle(\"Energy Efficiency by Ship and Engine Type\") +\n  theme_ridges(center_axis_labels = TRUE)\n\n\n\n\n\n\n\n\nKey Observations\nDiesel engines exhibit higher energy efficiency for Fish Carriers, whereas Heavy Fuel Oil (HFO) engines show better efficiency for Container Ships and Tankers. For Bulk Carriers, Steam Turbines tend to perform better, as indicated by a higher range in the third quartile of efficiency measurements.\nAs the differences become more pronounced, it suggests that engine type may play a more significant role in determining a ship’s efficiency for different ship types. Further investigation could help uncover why certain engine types perform better for specific ship types, paving the way for optimization strategies to enhance overall energy efficiency.\n\n\n4.2.2 Efficiency by Maintenance status\nShip maintenance and repair play a crucial role in the maritime industry, ensuring the smooth operation of the fleet with minimal disruptions. Regular maintenance can enhance operational efficiency and drives profitability by preventing unexpected failures and optimizing performance.\nTo analyze how maintenance status impacts energy efficiency, we use ridgeline plots to visualize the distribution of efficiency indicators across different maintenance statuses.\nThe below code chunk uses ggplot(), stat_density_ridges(), scale_fill_viridis_d(), scale_x_continuous() and theme_ridges() to plot ridgeline plots of energy efficiency Maintenance status, excluding records where Engine Type is “None”, Ship Type is “None” or Maintenance status is “None”. Additionally, facet_wrap() is used to arrange the plots into separate grid by Ship type.\n\nggplot(filter(ship, Engine_Type != \"None\", Ship_Type != \"None\",\n              Maintenance_Status != \"None\"), \n       aes(x = Efficiency_nm_per_kWh, \n           y = Maintenance_Status,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\", alpha = 0.8) +\n  scale_x_continuous(\n    name = \"Energy efficiency in nm per kWh\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL) +\n  facet_wrap(~ Ship_Type, scales = \"free_y\")+\n  ggtitle(label = \"Energy Efficiency by Maintenance Status of Different Ship Types\") +\n  theme_ridges(center_axis_labels = TRUE)\n\n\n\n\n\n\n\n\nKey Observations\nThe plot shows that for Bulk carrier and Container ship, ships in Good maintenance status tend to have higher energy efficiency, as indicated by their distribution shifting toward higher nm per kWh values. Interestingly, for Fish carrier and Tanker, ships in Critical maintenance status tend to have higher energy efficiency, which may require further investigation to understand the root cause.\nAcross all Ship types, ships with Fair maintenance status consistently show the lowest energy efficiency performance. However, the ridgeline plots do not exhibit strong, consistent differences across maintenance categories, suggesting that maintenance status alone may not be a key determinant of energy efficiency in this dataset.\n\n\n4.2.3 Efficiency by Weather condition\nAccording to voyage intelligence specialist StratumFive’s CEO, Stuart Nicholls, weather conditions can impact up to 80% of a vessel’s performance. Given this significant influence, we analyze how energy efficiency varies across different ship types under three weather conditions: calm, moderate, and rough.\nRaincloud plots will be used to provide a combined view on both key summary statistics and probability density. For all the following plots, the below functions will be used:\n\nfilter(): filter out records with Weather = None or Ship type = None.\nggplot(): to define the input dataframe and axes\nstat_halfeye(): creates a visualization that includes a half-density plot and a slab interval\ngeom_boxplot(): add the second geometry layer with a box plot\nstat_dots(): creates a half-dotplot, which resembles a histogram and visually represents the number of samples (dots) within each bin\ncoord_flip(): rotate the raincloud plot horizontally, creating the characteristic raincloud shape.\n\n\n4.2.3.1 Calm Weather\n\nggplot(filter(ship, Weather_Condition == \"Calm\", Ship_Type != \"None\"), \n       aes(x = Ship_Type, \n           y = Efficiency_nm_per_kWh)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 1,\n               point_colour = NA,\n               scale = 0.55) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.1, \n            binwidth = 0.05,\n            dotsize = 0.1,\n            ) +\n  coord_flip() +\n  ggtitle(\"Energy Efficiency by Ship Type in Calm Weather\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nKey Observations\nBulk Carriers and Container Ships tend to exhibit slightly higher energy efficiency in calm weather compared to Fish Carriers and Tankers. Among them, Container Ships show the highest median efficiency, suggesting they perform the best under calm conditions. For the remaining ship types, the median efficiency remains fairly similar, indicating that weather alone may not be a major differentiator in efficiency under calm weather condition.\nThe density distributions (clouds above the box plots) reveal that most ships operate within a similar efficiency range, but Bulk Carriers and Container Ships have a higher concentration of outliers on the upper end, suggesting that some vessels achieve exceptionally high efficiency. Conversely, outliers on the lower end are present across all ship types, indicating that certain ships struggle with efficiency even in calm weather, warranting further investigation into maintenance, operational factors, or design inefficiencies.\n\n\n4.2.3.2 Moderate Weather\n\nggplot(filter(ship, Weather_Condition == \"Moderate\", Ship_Type != \"None\"), \n       aes(x = Ship_Type, \n           y = Efficiency_nm_per_kWh)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 1,\n               point_colour = NA,\n               scale = 0.55) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.1, \n            binwidth = 0.05,\n            dotsize = 0.1,\n            ) +\n  coord_flip() +\n  ggtitle(\"Energy Efficiency by Ship Type in Moderate Weather\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nKey Observations\nThe overall shape of the density distributions remains similar to that in calm weather, indicating that moderate weather does not drastically alter ship efficiency. However, the broader spread suggests that moderate weather introduces additional operational challenges, leading to greater variability in performance across ship types.\nThe median energy efficiency values are more comparable across ship types than in calm weather. Interestingly, Container Ships, which had the highest median efficiency in calm conditions, now have the lowest median in moderate weather, suggesting they may be more affected by changing conditions. Tankers and Fish Carriers exhibit the narrowest interquartile range (IQR), indicating that their efficiency remains more stable in moderate weather. Conversely, Bulk Carriers and Container Ships show higher variation, with distributions extending towards both lower and higher efficiency values, suggesting that external factors from weather condition impact their performance more significantly than other ship types.\n\n\n4.2.3.3 Rough Weather\n\nggplot(filter(ship, Weather_Condition == \"Rough\", Ship_Type != \"None\"), \n       aes(x = Ship_Type, \n           y = Efficiency_nm_per_kWh)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.1,\n               .width = 1,\n               point_colour = NA,\n               scale = 0.55) +\n  geom_boxplot(width = .15,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.1, \n            binwidth = 0.05,\n            dotsize = 0.1,\n            ) +\n  coord_flip() +\n  ggtitle(\"Energy Efficiency by Ship Type in Rough Weather\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nKey Observations\nCompared to moderate weather conditions, the interquartile range (IQR) has further widened across all ship types except for Bulk carrier, indicating increased variability in efficiency especially for Container Ships.\nThe right tails of the distributions remain prominent, showing that some ships still achieve high efficiency, but the density at extremely low values has also increased, suggesting that certain vessels experience a significant drop in efficiency due to weather-induced resistance. The median efficiency for Tankers has shifted downward significantly compared to moderate weather, indicating that rough conditions have a particularly strong negative impact on their energy efficiency."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5: Visual Multivariate Analysis",
    "section": "",
    "text": "1 Getting Started\n\npacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)\n\n\n\n2 Import the data\n\ncar_resale = read_xls(\"data/ToyotaCorolla.xls\",\"data\")\n\n\nlist(car_resale)\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\nsummary(car_resale)\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n3 Data Overview\n\nsummary1 = car_resale |&gt;\n  ExpData(type = 1)\n\n\ncar_resale |&gt;\n  ExpData(type = 2)\n\n   Index    Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1               Id       numeric     1436             0              0\n2      2            Model     character     1436             0              0\n3      3            Price       numeric     1436             0              0\n4      4        Age_08_04       numeric     1436             0              0\n5      5        Mfg_Month       numeric     1436             0              0\n6      6         Mfg_Year       numeric     1436             0              0\n7      7               KM       numeric     1436             0              0\n8      8    Quarterly_Tax       numeric     1436             0              0\n9      9           Weight       numeric     1436             0              0\n10    10 Guarantee_Period       numeric     1436             0              0\n11    11           HP_Bin     character     1436             0              0\n12    12           CC_bin     character     1436             0              0\n13    13            Doors       numeric     1436             0              0\n14    14            Gears       numeric     1436             0              0\n15    15        Cylinders       numeric     1436             0              0\n16    16        Fuel_Type     character     1436             0              0\n17    17            Color     character     1436             0              0\n18    18        Met_Color       numeric     1436             0              0\n19    19        Automatic       numeric     1436             0              0\n20    20    Mfr_Guarantee       numeric     1436             0              0\n21    21  BOVAG_Guarantee       numeric     1436             0              0\n22    22              ABS       numeric     1436             0              0\n23    23         Airbag_1       numeric     1436             0              0\n24    24         Airbag_2       numeric     1436             0              0\n25    25            Airco       numeric     1436             0              0\n26    26  Automatic_airco       numeric     1436             0              0\n27    27    Boardcomputer       numeric     1436             0              0\n28    28        CD_Player       numeric     1436             0              0\n29    29     Central_Lock       numeric     1436             0              0\n30    30  Powered_Windows       numeric     1436             0              0\n31    31   Power_Steering       numeric     1436             0              0\n32    32            Radio       numeric     1436             0              0\n33    33        Mistlamps       numeric     1436             0              0\n34    34      Sport_Model       numeric     1436             0              0\n35    35 Backseat_Divider       numeric     1436             0              0\n36    36     Metallic_Rim       numeric     1436             0              0\n37    37   Radio_cassette       numeric     1436             0              0\n38    38          Tow_Bar       numeric     1436             0              0\n   No_of_distinct_values\n1                   1436\n2                    372\n3                    236\n4                     77\n5                     12\n6                      7\n7                   1263\n8                     13\n9                     59\n10                     9\n11                     3\n12                     3\n13                     4\n14                     4\n15                     1\n16                     3\n17                    10\n18                     2\n19                     2\n20                     2\n21                     2\n22                     2\n23                     2\n24                     2\n25                     2\n26                     2\n27                     2\n28                     2\n29                     2\n30                     2\n31                     2\n32                     2\n33                     2\n34                     2\n35                     2\n36                     2\n37                     2\n38                     2\n\n\n\ncols = c(\"Mfg_Month\",\"HP_Bin\",\"CC_bin\",\"Doors\",\"Gears\",\"Cylinders\",\"Fuel_Type\",\"Color\",\"Met_Color\",\"Automatic\",\"Mfr_Guarantee\",\"BOVAG_Guarantee\",\"ABS\",\"Airbag_1\",\"Airbag_2\",\"Airco\",\"Automatic_airco\",\"Boardcomputer\",\"CD_Player\",\"Central_Lock\",\"Powered_Windows\",\"Power_Steering\",\"Radio\",\"Mistlamps\",\"Sport_Model\",\"Backseat_Divider\",\"Metallic_Rim\",\"Radio_cassette\",\"Tow_Bar\")\n\n\ncar_resale = read_xls(\"data/ToyotaCorolla.xls\",\"data\") |&gt;\n  mutate(Id = as.character(Id)) |&gt;\n  mutate_each_(funs(factor(.)),cols)\n\n\ncar_resale |&gt;\n  ExpNumViz(target = NULL,\n            nlim=10,\n            Page=c(2,2))\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncar_resale |&gt;\n  ExpNumViz(target = \"Price\",\n            nlim = 10,\n            Page = c(2,2))\n\n$`0`\n\n\n\n\n\n\n\n\n\n\ncar_resale |&gt;\n  ExpNumViz(target = NULL,\n            nlim=10,\n            Page=c(2,2),\n            theme = \"Default\")\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncar_resale |&gt;\n  ExpCatViz(target = NULL,\n            col = \"sky blue\",\n            clim = 10,\n            margin = 2,\n            Page = c(4,4),\n            sample = 16)\n\n$`0`\n\n\n\n\n\n\n\n\n\n\nmodel = lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n           data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c = check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\nmodel1 = lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n           data = car_resale)\ncheck_normality(model1)\n\nWarning: Non-normality of residuals detected (p &lt; .001).\n\n\n\ncheck_heteroskedasticity(model1)\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\n\nplot(check_model(model1))\n\n\n\n\n\n\n\n\n\ntbl_regression(model1,\n               intercept = TRUE) |&gt;\n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared,\n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n&lt;0.001\n    KM\n-0.02\n-0.03, -0.02\n&lt;0.001\n    Weight\n20\n18, 21\n&lt;0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n    \n      R² = 0.849; Adjusted R² = 0.848; AIC = 24,915; Statistic = 2,005; p-value = &lt;0.001; σ = 1,413\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\np_model1 = parameters(model1)\n\n\nggcoefstats(model1,\n            ouput = \"plot\")"
  }
]