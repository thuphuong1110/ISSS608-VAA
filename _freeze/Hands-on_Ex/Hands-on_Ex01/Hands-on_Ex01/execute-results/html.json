{
  "hash": "1459538e83db97afd06e832846f44aac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"17 January 2025\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\n# Overview\n\nThis hands-on exercise introduces the fundamental principles and key components of `ggplot2`. We will explore how to to create statistical graphics using the Layered Grammar of Graphics principle. By the end, we will apply ggplot2's essential graphical elements to produce elegant and informative statistical graphics.\n\n# Getting Started\n\n## Install and load the required libraries\n\nTo begin, we'll check for the necessary R packages. If they are installed, we'll load them. Otherwise, we'll install and then load them into the R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n\n## Import data\n\nThe code chunk below imports *exam_data.csv* into R environment using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nThe dataset includes year end examination grades of a cohort of primary 3 students from a local school. There are a total of 7 attributes. 4 of them are categorical data type and the other 3 are continuous data type.\n\n-   The categorical attributes are: ID, CLASS, GENDER and RACE.\n\n-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n# Introduce ggplot\n\nggplot2 is an R package for **declaratively** creating **data-driven** graphics based on ***The Grammar of Graphics***. It is also part of the **tidyverse** family specially designed for visual exploration and communication. For more detail, visit [ggplot2 link](https://ggplot2.tidyverse.org/)\n\n## R Graphics VS ggplot\n\nFirst we compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n::: panel-tabset\n## R Graphics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## ggplots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n:::\n\nThe code chunk is relatively straightforward when using R's base graphics. This raises the question: why is **ggplot2** often recommended?\n\nAs Hadley Wickham explains, the advantage of ggplot2 lies not just in its syntax for creating plots, but in the conceptual framework it introduces. ggplot2 teaches a powerful way of thinking about data visualization—mapping variables to the visual properties of geometric objects in a structured and meaningful way. This approach fosters a deeper understanding of visualization as a tool for effectively communicating data insights.\n\n# Grammar of Graphics\n\nBefore diving into **ggplot2**, it is crucial to understand the principles of the **Grammar of Graphics**.\n\nThe Grammar of Graphics is a framework for data visualization that deconstructs graphs into semantic components, such as scales and layers. This concept, introduced by Leland Wilkinson in his 1999 book *The Grammar of Graphics* (Springer), addresses a fundamental question:\n\n**What is a statistical graphic?**\n\nIn essence, the Grammar of Graphics provides the rules for combining mathematical and aesthetic elements to create meaningful visualizations.\n\n**Principles of the Grammar of Graphics:**\n\n1.  **Graphics as Layers of Grammatical Elements**: Graphs are composed of distinct layers, each representing a specific aspect of the data or visual structure.\n\n2.  **Aesthetic Mapping for Meaningful Plots**: Mapping data variables to visual properties (e.g., color, shape, size) ensures that plots convey meaningful insights.\n\nA robust grammar of graphics enables us to:\n\n-   Understand the composition of complex graphs.\n\n-   Uncover unexpected connections between seemingly different types of graphics (Cox, 1978).\n\n-   Establish a foundation for interpreting a wide variety of visualizations.\n\n-   Guide the creation of well-formed and correct graphics.\n\nHowever, while the Grammar of Graphics helps us identify well-constructed visuals, it also allows for grammatically correct but nonsensical graphics, emphasizing the importance of thoughtful design and context.\n\n## A Layered Grammar of Graphics\n\n**ggplot2** is an implementation of Leland Wilkinson’s Grammar of Graphics. The figure below shows the seven grammars of ggplot2.\n\n![](/Illustration/image4.jpg)\n\nReference: Hadley Wickham (2010) [“A layered grammar of graphics.”](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3–28.\n\nEach component plays a vital role in constructing meaningful and flexible visualizations. Below is a brief description of each building block:\n\n-   **Data**: The dataset that serves as the foundation for the visualization.\n\n-   **Aesthetics**: Map data attributes to visual properties such as position, color, size, shape, or transparency, allowing the graph to communicate meaningful patterns.\n\n-   **Geometries**: Define the visual representation of data points, such as points, bars, lines, or other shapes.\n\n-   **Facets**: Subdivide the data into subsets, enabling the creation of multiple panels or variations of the same graph.\n\n-   **Statistics**: Apply transformations or summaries to the data, such as calculating means, medians, or confidence intervals, to highlight key insights.\n\n-   **Coordinate Systems**: Determine the plane or framework in which the data is displayed, such as Cartesian or polar coordinates.\n\n-   **Themes**: Customize non-data elements of the plot, such as the titles, axis labels, gridlines, or legend background.\n\n# Essential Grammatical Elements in ggplot2: data\n\nLet us call the `ggplot()` function using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n**Note:**\n\n-   A blank canvas appears.\n\n-   `ggplot()` initializes a ggplot object.\n\n-   The *data* argument defines the dataset to be used for plotting.\n\n-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`\n\n# Essential Grammatical Elements in ggplot2: [Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)\n\nAesthetic mappings connect attributes of the data to visual characteristics of the plot, such as position, color, size, shape, or transparency. Each visual characteristic encodes an aspect of the data, enabling the visualization to effectively convey information.\n\nIn **ggplot2**, all aesthetic mappings are defined using the `aes()` function. Notably, each `geom` layer in a plot can have its own `aes()` specification, allowing for flexibility in customization.\n\nThe below code chunk incorporates aesthetic elements into a plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n**Note**: ggplot includes the x-axis and the axis’s label.\n\n# Essential Grammatical Elements in ggplot2: geom\n\nGeometric objects, or **geoms**, represent the actual marks placed on a plot to visualize data. They define how data points are displayed, such as through points, lines, bars, or polygons. Choosing the appropriate geom is essential to effectively communicate the patterns and insights in your data.\n\nHere are some commonly used geoms in **ggplot2**:\n\n1.  **`geom_point`**: Creates individual points (e.g., for scatter plots).\n\n2.  **`geom_line`**: Draws lines (e.g., for line charts).\n\n3.  **`geom_smooth`**: Adds smoothed lines, useful for trend analysis or approximations.\n\n4.  **`geom_bar`**: Produces bar charts, where bars represent data values or counts.\n\n5.  **`geom_histogram`**: Creates histograms by binning values into ranges.\n\n6.  **`geom_polygon`**: Draws arbitrary shapes, often for complex visualizations.\n\n7.  **`geom_map`**: Generates polygons in the shape of a map. The `map_data()` function provides built-in map datasets for use with this geom.\n\n![](/Illustration/image6.jpg)\n\n-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.\n\n-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).\n\n## Geometric Objects: geom_bar\n\nThe code chunk below plots a bar chart by using [`geom_bar()`](https://ggplot2.tidyverse.org/reference/geom_bar.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Geometric Objects: geom_dotplot\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nIn the code chunk below, [`geom_dotplot()`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n**Note**: The y scale is not very useful, in fact it is very misleading.\n\nThe code chunk below performs the following two steps:\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n\n-   *binwidth argument* is used to change the binwidth to 2.5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Geometric Objects: `geom_histogram()`\n\nIn the code chunk below, [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nNote that the default bin is 30.\n\n## Modifying a geometric object by changing `geom()`\n\nIn the code chunk below,\n\n-   *bins* argument is used to change the number of bins to 20,\n\n-   *fill* argument is used to shade the histogram with light blue color, and\n\n-   *color* argument is used to change the outline colour of the bars in black\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Modifying a geometric object by changing *aes()*\n\nThe code chunk below changes the interior colour of the histogram (i.e. *fill*) by using sub-group of *aesthetic()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n## Geometric Objects: geom-density()\n\n`geom_density()` computes and visualizes a **kernel density estimate**, offering a smoothed alternative to histograms. It is particularly useful for continuous data that originates from an underlying smooth distribution, providing a more refined representation of the data's probability density.\n\nThe following example demonstrates how to use `geom_density()` to plot the distribution of Math scores as a kernel density estimate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes().*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## Geometric Objects: geom_boxplot\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Geometric Objects: geom_violin\n\n`geom_violin()` is used to create **violin plots**, which are effective for comparing multiple data distributions. Unlike ordinary density curves, which can become visually cluttered when comparing more than a few distributions, violin plots arrange distributions side by side for clearer comparison. This makes them especially useful for visualizing and comparing grouped or categorized data.\n\nThe example below illustrates how to use `geom_violin()` to plot the distribution of Math scores by gender.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Geometric Objects: geom_point()\n\n[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.\n\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## *geom* objects can be combined\n\nThe code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n# Essential Grammatical Elements in ggplot2: stat\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n\n    -   a mean\n    -   a confidence limit\n\n-   There are two ways to use these functions:\n\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat.\n\n## Working with `stat()`\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Working with stat - the *stat_summary()* method\n\nThe code chunk below adds mean values by using `stat_summary()`function and overriding the default geom.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## Working with stat - the `geom()` method\n\nThe code chunk below adds mean values by using `geom_()` function and overriding the default stat.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Adding a best fit curve on a scatterplot?\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nIn the code chunk below, `geom_smooth()` is used to plot a best fit curve on the scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nNote: The default method used is *loess*.\n\nThe default smoothing method can be overridden as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n# Essential Grammatical Elements in ggplot2: Facets\n\nFacetting is a technique used to generate small multiples, also known as trellis plots, where each plot represents a different subset of the data. It serves as an alternative to using aesthetics for visualizing additional discrete variables. In **ggplot2**, there are two main functions for faceting: `facet_grid()` and `facet_wrap()`. These allow for efficient and organized visualization of grouped data across multiple panels.\n\n## Working with `facet_wrap()`\n\n[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nThe code chunk below plots a trellis plot using `facet-wrap()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n## `facet_grid()` function\n\n[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nThe code chunk below plots a trellis plot using `facet_grid()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n# Essential Grammatical Elements in ggplot2: Coordinates\n\nThe *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n## Working with Coordinate\n\nBy default, the bar chart of ggplot2 is in vertical form.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n## Changing the y- and x-axis range\n\nThe below scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n# Essential Grammatical Elements in ggplot2: themes\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n\n-   size of fonts\n\n-   gridlines\n\n-   colour of labels\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n## Working with theme\n\nThe code chunk below plot a horizontal bar chart using `theme_gray()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\nA horizontal bar chart plotted using `theme_classic()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nA horizontal bar chart plotted using `theme_minimal()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n# Reference\n\n-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.\n\n-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.\n\n-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version\n\n-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n\n-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n\n-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}