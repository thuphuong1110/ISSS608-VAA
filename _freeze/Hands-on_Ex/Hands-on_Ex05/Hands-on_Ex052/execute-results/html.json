{
  "hash": "8976985c9935f42c49ecba8870f01643",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 5.2: Visual Correlation Analysis\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"7 February 2025\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\n# Overview\n\nThe correlation coefficient is a widely used statistical measure that quantifies the type and strength of the relationship between two variables. The coefficient ranges from -1.0 to 1.0:\n\n-   1.0 indicates a perfect positive linear relationship.\n\n-   -1.0 indicates a perfect negative (inverse) linear relationship.\n\n-   0.0 indicates no linear relationship between the variables.\n\nWhen analyzing multivariate data, pairwise correlation coefficients are typically displayed in a structured format called a correlation matrix or scatterplot matrix.\n\nThere are three key reasons to computing a correlation matrix:\n\n1.  Understanding Relationships – Reveals pairwise relationships between high-dimensional variables.\n\n2.  Input for Further Analyses – Used in exploratory factor analysis, confirmatory factor analysis, structural equation modeling, and linear regression (especially when handling missing values pairwise).\n\n3.  Diagnostic Tool – Helps assess data relationships before conducting statistical modeling. For example, high correlations may indicate **multicollinearity**, which can make regression estimates unreliable.\n\nWhen working with large datasets (many observations and variables), a [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) is useful for visually exploring correlations. A corrgram organizes data using two main principles:\n\n1.  Depicting correlation values – Uses color or shape to represent both sign and magnitude of correlations.\n\n2.  Reordering variables – Groups “similar” variables adjacently for better interpretability.\n\nThis exercise is divided into three key sections:\n\n1.  Creating a Correlation Matrix – Using the `pairs()` function from R Graphics.\n\n2.  Plotting a Corrgram – Using the `corrplot` package.\n\n3.  Building an Interactive Correlation Matrix – Using the `Plotly` R package.\n\n# Installing and Launching R Packages\n\nThe code chunk below to installs **corrplot**, **ggpubr**, **ggstatsplot** and **tidyverse** in RStudio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse,ggpubr)\n```\n:::\n\n\n\n# Importing and Preparing The Data Set\n\nFor this exercise, the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations, with the red wine and white wine data combined into one file. The combined fine is called `wine_quality.csv`.\n\n## Importing Data\n\nFirst we import the data into R using `read_csv()` of **readr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\nNote that beside quality and type, the rest of the variables are continuous numerical data type.\n\n# Building Correlation Matrix: *pairs()* method\n\nThere are multiple ways to create a scatterplot matrix in R. In this section, you will learn how to generate one using the `pairs()` function from the **R Graphics** package.\n\nBefore proceeding, it is recommended to review the syntax and functionality of the `pairs()` function to understand its various customization options.\n\n## Building a basic correlation matrix\n\nThe figure below shows the scatter plot matrix of Wine Quality Data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nThe `pairs()` function requires input in the form of a matrix or data frame. Creating a scatterplot matrix using this function is straightforward.\n\nIn the following code chunk, the `pairs()` function is applied to columns 2 to 12 of the `wine` data frame. These columns represent key variables such as fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol. The resulting scatterplot matrix helps visualize pairwise relationships among these variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Drawing the lower corner\n\nThe `pairs()` function in R Graphics offers various customization options. One common practice is to display only the upper or lower half of the correlation matrix, rather than both, since the matrix is symmetric.\n\nTo visualize only the lower half of the correlation matrix, the `upper.panel` argument is used. The following code chunk demonstrates this approach, allowing for a cleaner and more interpretable scatterplot matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nSimilarly, we can display the upper half of the correlation matrix using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Including with correlation coefficients\n\nTo display the correlation coefficient for each pair of variables instead of scatterplots, the `panel.cor` function can be used. This function also scales the font size according to the magnitude of the correlation, making it easier to interpret higher correlations at a glance.\n\nFor now, simply enter the code into your R session or script and explore the results. Next, we’ll look at a more engaging way to visualize the correlation matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Visualising Correlation Matrix: ggcormat()\n\nA major limitation of traditional correlation matrices is that scatterplots can become overly cluttered when dealing with large datasets (e.g., more than 500 observations). To address this, the corrgram visualization technique—proposed by Murdoch & Chow (1996) and later refined by Friendly (2002)—offers a more structured way to explore correlation patterns.\n\nSeveral R packages provide functions to create corrgrams, including:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nAdditionally, packages like **ggstatsplot** also offer functions for building corrgrams.\n\n## The basic plot\n\nOne key advantage of using `ggcorrmat()` from the **ggstatsplot** package is its ability to generate a comprehensive and professional statistical report alongside the correlation matrix, as illustrated in the example below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nKey takeaways from the above code Chunk\n\n-   `cor.vars`: Specifies the variables used to compute the correlation matrix required for constructing the corrgram.\n\n-   `ggcorrplot.args`: Provides additional (mainly aesthetic) arguments passed to `ggcorrplot::ggcorrplot()`. However, it should exclude certain arguments (`corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, and `digits`), as these are already internally handled.\n\nThe below sub-code chunk demonstrates how to fine-tune specific components of the plot, such as adjusting the font size for the x-axis, y-axis, and statistical report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n# Building multiple plots\n\nSince **ggstasplot** is an extension of ggplot2, it also supports faceting. The feature is available in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-11-1.png){width=1152}\n:::\n:::\n\n\n\nKey Takeaways from the above code Chunk\n\n-   `grouping.var`: The only required argument for creating a facet plot. It determines how the data is grouped within the plot.\n\n-   `group_ggcorrmat()`: Internally utilizes the patchwork package to generate multiple plots (facet plots).\n\n-   `plotgrid.args`: A list of additional arguments passed to `patchwork::wrap_plots()`, excluding the `guides` argument, which is already handled separately.\n\n-   `annotation.args` argument: Used to specify plot annotations via the patchwork package, allowing for customized text, titles, or other annotations.\n\n# Visualising Correlation Matrix using corrplot Package\n\nIn this section, we will focus on using the `corrplot` package. However, it is encouraged to explore the other two packages available for correlation visualization.\n\nBefore starting, please read [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html)  to gain a foundational understanding of how the `corrplot` package works.\n\n## Getting started with corrplot\n\nTo create a correlation plot (corrgram) using `corrplot()`, we first need to compute the correlation matrix of the wine data frame. In the code below, we use the `cor()` function from R's `stats` package to calculate the correlation matrix of the wine data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram using all the default setting as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the default visual element used to plot the correlation matrix is a circle. The layout of the correlation plot (corrgram) is symmetric by default. The default color scheme is a diverging blue-red palette: blue colors represent pairs of variables with positive correlation coefficients, while red colors represent pairs with negative correlation coefficients. The intensity of the color, or saturation, indicates the strength of the correlation. Darker colors reflect a stronger linear relationship between the paired variables, while lighter colors suggest a weaker linear relationship.\n\n## Working with visual geometrics\n\nThe `corrplot` package offers seven visual geometrics (specified using the `method` parameter) to encode attribute values. These are: circle, square, ellipse, number, shade, color, and pie, with the default set to circle. As demonstrated in the previous section, the default visual geometric for the correlation plot is a circle. However, you can change this setting by using the `method` argument, as shown in the code snippet below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nFeel free to change the `method` argument to other supported visual geometrics.\n\n## Working with layout\n\nThe `corrplot()` function supports three layout types: \"full\", \"upper\", and \"lower\". By default, the layout is set to \"full\", which displays the entire matrix. You can change this setting by using the `type` argument in `corrplot()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nThe default layout of the correlation plot (corrgram) can be further customized. For instance, the `diag` argument can be used to turn off the diagonal cells, and the `tl.col` argument allows you to change the color of the axis text labels to black, as demonstrated in the code and figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Working with mixed layout\n\nWith the `corrplot` package, you can create a correlation plot (corrgram) with a mixed visual matrix—one half displaying the visual matrix and the other half showing the numerical matrix. To achieve this, use the `corrplot.mixed()` function, which is a wrapper for creating this mixed visualization style.\n\nThe figure below demonstrates a mixed layout correlation plot generated using the wine quality data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below plots the corrgram.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the `lower` and `upper` arguments define the visualization method for the respective halves of the correlation plot. In this case, the `ellipse` method is applied to the lower half of the corrgram, while the `number` method is used for the upper half. The `tl.pos` argument specifies the placement of the axis labels, and the `diag` argument determines the glyph displayed on the principal diagonal of the corrgram.\n\n## Combining corrgram with the significant test\n\nIn statistical analysis, it’s important to identify which pairs of variables have correlation coefficients that are statistically significant.\n\nWith corrplot package, we can use the `cor.mtest()` to compute the p-values and confidence interval for each pair of variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\n\nNext we use the `p.mat` argument of `corrplot` function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nThe figure above shows a corrgram combined with a significance test. The corrgram reveals that not all correlation pairs are statistically significant. For example, the correlation between total sulfur dioxide and free sulfur dioxide is statistically significant at the 0.1 significance level, but the correlation between total sulfur dioxide and citric acid is not.\n\n## Reorder a corrgram\n\nMatrix reordering is crucial for uncovering hidden structures and patterns in a correlation plot (corrgram). By default, the attributes in a corrgram are sorted based on the correlation matrix (i.e., \"original\" order). This default can be overwritten using the `order` argument in `corrplot()`. The `corrplot` package currently supports four sorting methods:\n\n-   “AOE”: Angular order of eigenvectors (see Michael Friendly, 2002, for details).\n\n-   “FPC”: Order based on the first principal component.\n\n-   “hclust”: Order based on hierarchical clustering, with the agglomeration method specified by the `hclust.method` argument. The available agglomeration methods are: \"ward\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", and \"centroid\".\n\n-   “alphabet”: Alphabetical order.\n\nThese four sorting methods—“AOE”, “FPC”, “hclust”, and “alphabet”—are available, but more algorithms can be found in the `seriation` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## Reordering a correlation matrix using hclust\n\nUsing **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex052_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n# Reference\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.\n\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.\n",
    "supporting": [
      "Hands-on_Ex052_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}